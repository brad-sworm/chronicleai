{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useUser } from '../UserContext';\nimport JournalEntryTable from '../components/JournalEntryTable';\nconst Dashboard = () => {\n  _s();\n  const {\n    user\n  } = useUser(); // Get the current user from context\n  const [journalEntries, setJournalEntries] = useState([]);\n  useEffect(() => {\n    const fetchJournalEntries = async () => {\n      if (user && user.id) {\n        try {\n          const response = await fetch(`http://localhost:3001/journal-entries/${user.id}`);\n          if (!response.ok) {\n            throw new Error('Failed to fetch journal entries');\n          }\n          const data = await response.json();\n          setJournalEntries(data);\n        } catch (error) {\n          console.error(error.message);\n        }\n      }\n    };\n    fetchJournalEntries();\n  });\n};\n_s(Dashboard, \"X7DFqMyxfJ8iS4xC8SmBBsjEeUQ=\", false, function () {\n  return [useUser];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","useUser","JournalEntryTable","Dashboard","_s","user","journalEntries","setJournalEntries","fetchJournalEntries","id","response","fetch","ok","Error","data","json","error","console","message","_c","$RefreshReg$"],"sources":["C:/Users/brads/memory_app/my-frontend/src/pages/Dashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useUser } from '../UserContext';\r\nimport JournalEntryTable from '../components/JournalEntryTable';\r\n\r\nconst Dashboard = () => {\r\n  const { user } = useUser(); // Get the current user from context\r\n  const [journalEntries, setJournalEntries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchJournalEntries = async () => {\r\n      if (user && user.id) {\r\n        try {\r\n          const response = await fetch(`http://localhost:3001/journal-entries/${user.id}`);\r\n          if (!response.ok) {\r\n            throw new Error('Failed to fetch journal entries');\r\n          }\r\n          const data = await response.json();\r\n          setJournalEntries(data);\r\n        } catch (error) {\r\n          console.error(error.message);\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchJournalEntries();\r\n  }, \r\n  )}\r\n\r\n  export default Dashboard;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,OAAO,QAAQ,gBAAgB;AACxC,OAAOC,iBAAiB,MAAM,iCAAiC;AAE/D,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM;IAAEC;EAAK,CAAC,GAAGJ,OAAO,CAAC,CAAC,CAAC,CAAC;EAC5B,MAAM,CAACK,cAAc,EAAEC,iBAAiB,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAExDD,SAAS,CAAC,MAAM;IACd,MAAMS,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC,IAAIH,IAAI,IAAIA,IAAI,CAACI,EAAE,EAAE;QACnB,IAAI;UACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyCN,IAAI,CAACI,EAAE,EAAE,CAAC;UAChF,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;YAChB,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;UACpD;UACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;UAClCR,iBAAiB,CAACO,IAAI,CAAC;QACzB,CAAC,CAAC,OAAOE,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;QAC9B;MACF;IACF,CAAC;IAEDV,mBAAmB,CAAC,CAAC;EACvB,CACA,CAAC;AAAA,CAAC;AAAAJ,EAAA,CAtBED,SAAS;EAAA,QACIF,OAAO;AAAA;AAAAkB,EAAA,GADpBhB,SAAS;AAwBb,eAAeA,SAAS;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}