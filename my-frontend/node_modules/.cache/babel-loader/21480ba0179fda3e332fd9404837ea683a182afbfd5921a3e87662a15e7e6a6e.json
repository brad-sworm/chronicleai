{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brads\\\\memory_app\\\\my-frontend\\\\src\\\\components\\\\KeywordAnalysis.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, Title, Tooltip, Legend, PointElement } from 'chart.js';\n\n// Register necessary Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(LineElement, CategoryScale, LinearScale, Title, Tooltip, Legend, PointElement);\nconst SentimentAnalysis = ({\n  entries\n}) => {\n  _s();\n  const [sentiments, setSentiments] = useState([]);\n\n  // Hardcoded keyword counts from KeywordAnalysis component\n  const defaultCounts = [5, 4, 3, 3, 2, 1, 1]; // Emphasizing negative sentiment\n\n  useEffect(() => {\n    // Check if entries are available, otherwise use default counts\n    const sentimentData = entries && entries.length > 0 ? entries.map(() => Math.random() * 2 - 1) // Random values between -1 and 1\n    : defaultCounts.map(count => count > 2 ? Math.random() * 0.5 : Math.random() * -0.5); // Adjust for sentiment\n    setSentiments(sentimentData);\n  }, [entries]);\n\n  // Prepare the chart data\n  const data = {\n    labels: ['stressed', 'overwhelmed', 'tough', 'personal', 'work', 'future', 'neutral'],\n    // Keywords as labels\n    datasets: [{\n      label: 'Sentiment',\n      data: sentiments,\n      borderColor: 'rgba(75, 192, 192, 1)',\n      // Line color\n      backgroundColor: 'rgba(75, 192, 192, 0.2)',\n      // Area under line color\n      fill: true,\n      tension: 0.4\n    }]\n  };\n  const options = {\n    responsive: true,\n    scales: {\n      y: {\n        min: -1,\n        max: 1,\n        ticks: {\n          stepSize: 0.5\n        }\n      }\n    },\n    plugins: {\n      tooltip: {\n        callbacks: {\n          label: function (tooltipItem) {\n            const sentiment = tooltipItem.raw;\n            return sentiment > 0 ? `Positive (${sentiment.toFixed(2)})` : sentiment < 0 ? `Negative (${sentiment.toFixed(2)})` : `Neutral (${sentiment.toFixed(2)})`;\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Sentiment Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"sentimentChart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(SentimentAnalysis, \"1NNiX6nmnMl8RaepDjHjvyr8D0M=\");\n_c = SentimentAnalysis;\nexport default SentimentAnalysis;\nvar _c;\n$RefreshReg$(_c, \"SentimentAnalysis\");","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","ChartJS","LineElement","CategoryScale","LinearScale","Title","Tooltip","Legend","PointElement","jsxDEV","_jsxDEV","register","SentimentAnalysis","entries","_s","sentiments","setSentiments","defaultCounts","sentimentData","length","map","Math","random","count","data","labels","datasets","label","borderColor","backgroundColor","fill","tension","options","responsive","scales","y","min","max","ticks","stepSize","plugins","tooltip","callbacks","tooltipItem","sentiment","raw","toFixed","children","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["C:/Users/brads/memory_app/my-frontend/src/components/KeywordAnalysis.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, Title, Tooltip, Legend, PointElement } from 'chart.js';\r\n\r\n// Register necessary Chart.js components\r\nChartJS.register(LineElement, CategoryScale, LinearScale, Title, Tooltip, Legend, PointElement);\r\n\r\nconst SentimentAnalysis = ({ entries }) => {\r\n  const [sentiments, setSentiments] = useState([]);\r\n  \r\n  // Hardcoded keyword counts from KeywordAnalysis component\r\n  const defaultCounts = [5, 4, 3, 3, 2, 1, 1]; // Emphasizing negative sentiment\r\n\r\n  useEffect(() => {\r\n    // Check if entries are available, otherwise use default counts\r\n    const sentimentData = (entries && entries.length > 0)\r\n      ? entries.map(() => Math.random() * 2 - 1) // Random values between -1 and 1\r\n      : defaultCounts.map(count => (count > 2 ? Math.random() * 0.5 : Math.random() * -0.5)); // Adjust for sentiment\r\n    setSentiments(sentimentData);\r\n  }, [entries]);\r\n\r\n  // Prepare the chart data\r\n  const data = {\r\n    labels: ['stressed', 'overwhelmed', 'tough', 'personal', 'work', 'future', 'neutral'], // Keywords as labels\r\n    datasets: [\r\n      {\r\n        label: 'Sentiment',\r\n        data: sentiments,\r\n        borderColor: 'rgba(75, 192, 192, 1)', // Line color\r\n        backgroundColor: 'rgba(75, 192, 192, 0.2)', // Area under line color\r\n        fill: true,\r\n        tension: 0.4,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    scales: {\r\n      y: {\r\n        min: -1,\r\n        max: 1,\r\n        ticks: {\r\n          stepSize: 0.5,\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function (tooltipItem) {\r\n            const sentiment = tooltipItem.raw;\r\n            return sentiment > 0\r\n              ? `Positive (${sentiment.toFixed(2)})`\r\n              : sentiment < 0\r\n              ? `Negative (${sentiment.toFixed(2)})`\r\n              : `Neutral (${sentiment.toFixed(2)})`;\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Sentiment Analysis</h3>\r\n      <canvas id=\"sentimentChart\"></canvas>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SentimentAnalysis;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}