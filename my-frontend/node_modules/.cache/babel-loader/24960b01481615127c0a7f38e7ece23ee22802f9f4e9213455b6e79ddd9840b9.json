{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brads\\\\memory_app\\\\my-frontend\\\\src\\\\pages\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useUser } from '../UserContext';\nimport JournalEntryTable from '../components/JournalEntryTable';\nimport KeywordAnalysis from '../components/KeywordAnalysis'; // Import KeywordAnalysis\nimport '../styles/Dashboard.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const {\n    user\n  } = useUser();\n  console.log('User data:', user); // Log user data to see if it's being set\n\n  const [journalEntries, setJournalEntries] = useState([]);\n\n  // Default demo journal entries when no user is signed in\n  const demoEntries = Array.from({\n    length: 10\n  }, (_, index) => ({\n    _id: index.toString(),\n    text: `Sample journal entry number ${index + 1}. This is a demonstration entry.`,\n    metadata: {\n      date: new Date().toISOString(),\n      keywords: ['demo', 'test', 'sample'],\n      names: ['John Doe']\n    },\n    media: []\n  }));\n  useEffect(() => {\n    const fetchJournalEntries = async () => {\n      if (user && user.username) {\n        try {\n          const response = await fetch(`http://localhost:3001/journal-entries/${user.username}`);\n          if (!response.ok) {\n            throw new Error('Failed to fetch journal entries');\n          }\n          const data = await response.json();\n          console.log('Journal Entries from Backend:', data);\n          setJournalEntries(data);\n        } catch (error) {\n          console.error(error.message);\n        }\n      } else {\n        // Show default demo entries when no user is signed in\n        setJournalEntries(demoEntries);\n      }\n    };\n    fetchJournalEntries();\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"dashboard-title\",\n      children: user ? `Welcome, ${user.username}` : \"Welcome, Guest\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: [/*#__PURE__*/_jsxDEV(KeywordAnalysis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(JournalEntryTable, {\n        journalEntries: journalEntries\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"X7DFqMyxfJ8iS4xC8SmBBsjEeUQ=\", false, function () {\n  return [useUser];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","useUser","JournalEntryTable","KeywordAnalysis","jsxDEV","_jsxDEV","Dashboard","_s","user","console","log","journalEntries","setJournalEntries","demoEntries","Array","from","length","_","index","_id","toString","text","metadata","date","Date","toISOString","keywords","names","media","fetchJournalEntries","username","response","fetch","ok","Error","data","json","error","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/brads/memory_app/my-frontend/src/pages/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useUser } from '../UserContext';\r\nimport JournalEntryTable from '../components/JournalEntryTable';\r\nimport KeywordAnalysis from '../components/KeywordAnalysis'; // Import KeywordAnalysis\r\nimport '../styles/Dashboard.css'; // Import the CSS file\r\n\r\nconst Dashboard = () => {\r\n  const { user } = useUser();\r\n  console.log('User data:', user); // Log user data to see if it's being set\r\n\r\n  const [journalEntries, setJournalEntries] = useState([]);\r\n  \r\n  // Default demo journal entries when no user is signed in\r\n  const demoEntries = Array.from({ length: 10 }, (_, index) => ({\r\n    _id: index.toString(),\r\n    text: `Sample journal entry number ${index + 1}. This is a demonstration entry.`,\r\n    metadata: {\r\n      date: new Date().toISOString(),\r\n      keywords: ['demo', 'test', 'sample'],\r\n      names: ['John Doe'],\r\n    },\r\n    media: [],\r\n  }));\r\n\r\n  useEffect(() => {\r\n    const fetchJournalEntries = async () => {\r\n      if (user && user.username) {\r\n        try {\r\n          const response = await fetch(`http://localhost:3001/journal-entries/${user.username}`);\r\n          if (!response.ok) {\r\n            throw new Error('Failed to fetch journal entries');\r\n          }\r\n          const data = await response.json();\r\n          console.log('Journal Entries from Backend:', data);\r\n          setJournalEntries(data);\r\n        } catch (error) {\r\n          console.error(error.message);\r\n        }\r\n      } else {\r\n        // Show default demo entries when no user is signed in\r\n        setJournalEntries(demoEntries);\r\n      }\r\n    };\r\n\r\n    fetchJournalEntries();\r\n  }, [user]);\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <h1 className=\"dashboard-title\">\r\n        {user ? `Welcome, ${user.username}` : \"Welcome, Guest\"}\r\n      </h1>\r\n      <div className=\"card-container\">\r\n        <KeywordAnalysis />\r\n        <JournalEntryTable journalEntries={journalEntries} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}