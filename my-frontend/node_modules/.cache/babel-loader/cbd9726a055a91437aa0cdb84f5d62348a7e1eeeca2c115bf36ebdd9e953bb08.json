{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brads\\\\memory_app\\\\my-frontend\\\\src\\\\components\\\\JournalEntry.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport MediaUpload from './MediaUpload';\nimport SpeechToText from './SpeechToText';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JournalEntry = () => {\n  _s();\n  const [text, setText] = useState('');\n  const [metadata, setMetadata] = useState({\n    startTime: null,\n    endTime: null,\n    duration: null,\n    date: null,\n    keywords: [],\n    names: []\n  });\n  const [selectedMedia, setSelectedMedia] = useState([]);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [message, setMessage] = useState('');\n  const handleTextChange = (textData, metadataData) => {\n    setText(textData);\n    setMetadata(metadataData);\n  };\n  const handleMediaSelect = files => {\n    setSelectedMedia(files);\n  };\n  const handleSubmit = async () => {\n    setIsSubmitting(true);\n    setMessage('');\n    const formData = new FormData();\n    formData.append('text', text);\n    formData.append('metadata', JSON.stringify(metadata));\n    selectedMedia.forEach(file => {\n      formData.append('media', file); // Ensure all media files use the field name 'media'\n    });\n    formData.append('user', 'specificUserId'); // Replace with actual user ID or get it dynamically\n\n    try {\n      const response = await fetch('http://localhost:3001/journal-entries', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setMessage('Journal entry submitted successfully!');\n      // Clear the input fields after successful submission\n      setText('');\n      setMetadata({\n        startTime: null,\n        endTime: null,\n        duration: null,\n        date: null,\n        keywords: [],\n        names: []\n      });\n      setSelectedMedia([]);\n    } catch (error) {\n      setMessage(`Error submitting journal entry: ${error.message}`);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      marginTop: '50px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Journal Entry\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SpeechToText, {\n      onTextChange: handleTextChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MediaUpload, {\n      onMediaSelect: handleMediaSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      disabled: isSubmitting || !text.trim(),\n      children: isSubmitting ? 'Submitting...' : 'Submit Entry'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(JournalEntry, \"UPoJCGACvn97z/nv/9GYa9qotog=\");\n_c = JournalEntry;\nexport default JournalEntry;\nvar _c;\n$RefreshReg$(_c, \"JournalEntry\");","map":{"version":3,"names":["React","useState","MediaUpload","SpeechToText","jsxDEV","_jsxDEV","JournalEntry","_s","text","setText","metadata","setMetadata","startTime","endTime","duration","date","keywords","names","selectedMedia","setSelectedMedia","isSubmitting","setIsSubmitting","message","setMessage","handleTextChange","textData","metadataData","handleMediaSelect","files","handleSubmit","formData","FormData","append","JSON","stringify","forEach","file","response","fetch","method","body","ok","Error","status","data","json","error","style","display","flexDirection","alignItems","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","onTextChange","onMediaSelect","onClick","disabled","trim","_c","$RefreshReg$"],"sources":["C:/Users/brads/memory_app/my-frontend/src/components/JournalEntry.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport MediaUpload from './MediaUpload';\r\nimport SpeechToText from './SpeechToText';\r\n\r\nconst JournalEntry = () => {\r\n  const [text, setText] = useState('');\r\n  const [metadata, setMetadata] = useState({\r\n    startTime: null,\r\n    endTime: null,\r\n    duration: null,\r\n    date: null,\r\n    keywords: [],\r\n    names: [],\r\n  });\r\n  const [selectedMedia, setSelectedMedia] = useState([]);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n\r\n  const handleTextChange = (textData, metadataData) => {\r\n    setText(textData);\r\n    setMetadata(metadataData);\r\n  };\r\n\r\n  const handleMediaSelect = (files) => {\r\n    setSelectedMedia(files);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    setIsSubmitting(true);\r\n    setMessage('');\r\n  \r\n    const formData = new FormData();\r\n    formData.append('text', text);\r\n    formData.append('metadata', JSON.stringify(metadata));\r\n    selectedMedia.forEach((file) => {\r\n      formData.append('media', file); // Ensure all media files use the field name 'media'\r\n    });\r\n    formData.append('user', 'specificUserId'); // Replace with actual user ID or get it dynamically\r\n  \r\n    try {\r\n      const response = await fetch('http://localhost:3001/journal-entries', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n  \r\n      const data = await response.json();\r\n      setMessage('Journal entry submitted successfully!');\r\n      // Clear the input fields after successful submission\r\n      setText('');\r\n      setMetadata({\r\n        startTime: null,\r\n        endTime: null,\r\n        duration: null,\r\n        date: null,\r\n        keywords: [],\r\n        names: [],\r\n      });\r\n      setSelectedMedia([]);\r\n    } catch (error) {\r\n      setMessage(`Error submitting journal entry: ${error.message}`);\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '50px' }}>\r\n      <h2>Journal Entry</h2>\r\n      <SpeechToText onTextChange={handleTextChange} />\r\n      <MediaUpload onMediaSelect={handleMediaSelect} />\r\n      <button onClick={handleSubmit} disabled={isSubmitting || !text.trim()}>\r\n        {isSubmitting ? 'Submitting...' : 'Submit Entry'}\r\n      </button>\r\n      {message && <p>{message}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JournalEntry;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}