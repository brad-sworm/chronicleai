{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brads\\\\memory_app\\\\my-frontend\\\\src\\\\components\\\\EntryTimeline.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EntryTimeline = ({\n  entries\n}) => {\n  // Mock data with entries\n  const mockEntries = [{\n    metadata: {\n      date: '2025-01-10T08:30:00Z'\n    },\n    text: 'This is the first entry of the day, in the morning.'\n  }, {\n    metadata: {\n      date: '2025-01-10T13:45:00Z'\n    },\n    text: 'Lunch meeting with the team, afternoon thoughts.'\n  }, {\n    metadata: {\n      date: '2025-01-10T19:10:00Z'\n    },\n    text: 'Reflecting on the day’s progress, evening thoughts.'\n  }, {\n    metadata: {\n      date: '2025-01-11T09:00:00Z'\n    },\n    text: 'Morning jog, feeling energized!'\n  }, {\n    metadata: {\n      date: '2025-01-11T14:20:00Z'\n    },\n    text: 'Afternoon project update with the colleagues.'\n  }, {\n    metadata: {\n      date: '2025-01-11T20:30:00Z'\n    },\n    text: 'Late-night reflection on the goals for the next week.'\n  }, {\n    metadata: {\n      date: '2025-01-12T07:00:00Z'\n    },\n    text: 'Early morning brainstorming session.'\n  }, {\n    metadata: {\n      date: '2025-01-12T12:30:00Z'\n    },\n    text: 'Midday meeting to discuss the upcoming project.'\n  }, {\n    metadata: {\n      date: '2025-01-12T18:00:00Z'\n    },\n    text: 'Winding down, reviewing the work done today.'\n  }, {\n    metadata: {\n      date: '2025-01-13T08:15:00Z'\n    },\n    text: 'Morning coffee and catching up on emails.'\n  }, {\n    metadata: {\n      date: '2025-01-13T14:45:00Z'\n    },\n    text: 'Afternoon walk to clear my head.'\n  }, {\n    metadata: {\n      date: '2025-01-13T19:30:00Z'\n    },\n    text: 'Evening relaxation, preparing for tomorrow’s tasks.'\n  }];\n\n  // Sort entries by date\n  const sortedEntries = mockEntries.sort((a, b) => new Date(a.metadata.date) - new Date(b.metadata.date));\n\n  // Function to categorize entries into time blocks (Morning, Afternoon, Evening)\n  const categorizeTime = date => {\n    const hour = new Date(date).getHours();\n    if (hour < 12) return 'Morning';\n    if (hour < 18) return 'Afternoon';\n    return 'Evening';\n  };\n\n  // Create a set of unique dates\n  const uniqueDates = [...new Set(sortedEntries.map(entry => new Date(entry.metadata.date).toLocaleDateString()))];\n  // Create a set of unique time blocks\n  const timeBlocks = ['Morning', 'Afternoon', 'Evening'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: '30px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Entry Timeline\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      style: {\n        width: '100%',\n        borderCollapse: 'collapse'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Time Block\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this), uniqueDates.map(date => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: date\n          }, date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: timeBlocks.map(timeBlock => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: timeBlock\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this), uniqueDates.map(date => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: sortedEntries.filter(entry => new Date(entry.metadata.date).toLocaleDateString() === date && categorizeTime(entry.metadata.date) === timeBlock).map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                backgroundColor: timeBlock === 'Morning' ? '#d3f9d8' : timeBlock === 'Afternoon' ? '#ffe9b3' : '#f8d7da',\n                padding: '5px',\n                margin: '5px 0'\n              },\n              children: entry.text\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 23\n            }, this))\n          }, date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 17\n          }, this))]\n        }, timeBlock, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_c = EntryTimeline;\nexport default EntryTimeline;\nvar _c;\n$RefreshReg$(_c, \"EntryTimeline\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","EntryTimeline","entries","mockEntries","metadata","date","text","sortedEntries","sort","a","b","Date","categorizeTime","hour","getHours","uniqueDates","Set","map","entry","toLocaleDateString","timeBlocks","style","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","width","borderCollapse","timeBlock","filter","index","backgroundColor","padding","margin","_c","$RefreshReg$"],"sources":["C:/Users/brads/memory_app/my-frontend/src/components/EntryTimeline.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst EntryTimeline = ({ entries }) => {\r\n  // Mock data with entries\r\n  const mockEntries = [\r\n    { metadata: { date: '2025-01-10T08:30:00Z' }, text: 'This is the first entry of the day, in the morning.' },\r\n    { metadata: { date: '2025-01-10T13:45:00Z' }, text: 'Lunch meeting with the team, afternoon thoughts.' },\r\n    { metadata: { date: '2025-01-10T19:10:00Z' }, text: 'Reflecting on the day’s progress, evening thoughts.' },\r\n    { metadata: { date: '2025-01-11T09:00:00Z' }, text: 'Morning jog, feeling energized!' },\r\n    { metadata: { date: '2025-01-11T14:20:00Z' }, text: 'Afternoon project update with the colleagues.' },\r\n    { metadata: { date: '2025-01-11T20:30:00Z' }, text: 'Late-night reflection on the goals for the next week.' },\r\n    { metadata: { date: '2025-01-12T07:00:00Z' }, text: 'Early morning brainstorming session.' },\r\n    { metadata: { date: '2025-01-12T12:30:00Z' }, text: 'Midday meeting to discuss the upcoming project.' },\r\n    { metadata: { date: '2025-01-12T18:00:00Z' }, text: 'Winding down, reviewing the work done today.' },\r\n    { metadata: { date: '2025-01-13T08:15:00Z' }, text: 'Morning coffee and catching up on emails.' },\r\n    { metadata: { date: '2025-01-13T14:45:00Z' }, text: 'Afternoon walk to clear my head.' },\r\n    { metadata: { date: '2025-01-13T19:30:00Z' }, text: 'Evening relaxation, preparing for tomorrow’s tasks.' },\r\n  ];\r\n\r\n  // Sort entries by date\r\n  const sortedEntries = mockEntries.sort((a, b) => new Date(a.metadata.date) - new Date(b.metadata.date));\r\n\r\n  // Function to categorize entries into time blocks (Morning, Afternoon, Evening)\r\n  const categorizeTime = (date) => {\r\n    const hour = new Date(date).getHours();\r\n    if (hour < 12) return 'Morning';\r\n    if (hour < 18) return 'Afternoon';\r\n    return 'Evening';\r\n  };\r\n\r\n  // Create a set of unique dates\r\n  const uniqueDates = [...new Set(sortedEntries.map((entry) => new Date(entry.metadata.date).toLocaleDateString()))];\r\n  // Create a set of unique time blocks\r\n  const timeBlocks = ['Morning', 'Afternoon', 'Evening'];\r\n\r\n  return (\r\n    <div style={{ marginTop: '30px' }}>\r\n      <h3>Entry Timeline</h3>\r\n      <table style={{ width: '100%', borderCollapse: 'collapse' }}>\r\n        <thead>\r\n          <tr>\r\n            <th>Time Block</th>\r\n            {uniqueDates.map((date) => (\r\n              <th key={date}>{date}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {timeBlocks.map((timeBlock) => (\r\n            <tr key={timeBlock}>\r\n              <td>{timeBlock}</td>\r\n              {uniqueDates.map((date) => (\r\n                <td key={date}>\r\n                  {sortedEntries\r\n                    .filter(\r\n                      (entry) =>\r\n                        new Date(entry.metadata.date).toLocaleDateString() === date &&\r\n                        categorizeTime(entry.metadata.date) === timeBlock\r\n                    )\r\n                    .map((entry, index) => (\r\n                      <div key={index} style={{ backgroundColor: timeBlock === 'Morning' ? '#d3f9d8' : timeBlock === 'Afternoon' ? '#ffe9b3' : '#f8d7da', padding: '5px', margin: '5px 0' }}>\r\n                        {entry.text}\r\n                      </div>\r\n                    ))}\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EntryTimeline;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}