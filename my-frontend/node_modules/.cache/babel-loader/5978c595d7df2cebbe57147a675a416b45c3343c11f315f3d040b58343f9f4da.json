{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brads\\\\memory_app\\\\my-frontend\\\\src\\\\components\\\\EntryTimeline.js\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from 'chart.js';\n\n// Register necessary Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(LineElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\nconst EntryTimeline = ({\n  entries\n}) => {\n  // Parse the entries and sort them by date\n  const sortedEntries = entries.sort((a, b) => new Date(a.metadata.date) - new Date(b.metadata.date));\n\n  // Generate labels (dates) and data (time blocks) from entries\n  const labels = sortedEntries.map(entry => new Date(entry.metadata.date).toLocaleDateString());\n  const timeBlocks = sortedEntries.map(entry => {\n    const entryDate = new Date(entry.metadata.date);\n    const hour = entryDate.getHours();\n\n    // Map the hours to time blocks (morning, afternoon, evening)\n    if (hour < 12) return 'Morning';\n    if (hour < 18) return 'Afternoon';\n    return 'Evening';\n  });\n\n  // Create the chart data\n  const data = {\n    labels: labels,\n    datasets: [{\n      label: 'Timeline',\n      data: timeBlocks,\n      borderColor: 'rgba(75, 192, 192, 1)',\n      // Line color\n      backgroundColor: 'rgba(75, 192, 192, 0.2)',\n      // Area under line color\n      fill: false,\n      tension: 0.4\n    }]\n  };\n  const options = {\n    responsive: true,\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Date'\n        }\n      },\n      y: {\n        ticks: {\n          callback: function (value) {\n            return value; // Show the time block label on the Y-axis\n          }\n        },\n        title: {\n          display: true,\n          text: 'Time Block'\n        }\n      }\n    },\n    plugins: {\n      tooltip: {\n        callbacks: {\n          label: function (tooltipItem) {\n            return `Time Block: ${tooltipItem.raw}`;\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Entry Timeline\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_c = EntryTimeline;\nexport default EntryTimeline;\nvar _c;\n$RefreshReg$(_c, \"EntryTimeline\");","map":{"version":3,"names":["React","Line","Chart","ChartJS","LineElement","CategoryScale","LinearScale","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","EntryTimeline","entries","sortedEntries","sort","a","b","Date","metadata","date","labels","map","entry","toLocaleDateString","timeBlocks","entryDate","hour","getHours","data","datasets","label","borderColor","backgroundColor","fill","tension","options","responsive","scales","x","title","display","text","y","ticks","callback","value","plugins","tooltip","callbacks","tooltipItem","raw","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/brads/memory_app/my-frontend/src/components/EntryTimeline.js"],"sourcesContent":["import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from 'chart.js';\r\n\r\n// Register necessary Chart.js components\r\nChartJS.register(LineElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\r\n\r\nconst EntryTimeline = ({ entries }) => {\r\n  // Parse the entries and sort them by date\r\n  const sortedEntries = entries.sort((a, b) => new Date(a.metadata.date) - new Date(b.metadata.date));\r\n\r\n  // Generate labels (dates) and data (time blocks) from entries\r\n  const labels = sortedEntries.map(entry => new Date(entry.metadata.date).toLocaleDateString());\r\n  const timeBlocks = sortedEntries.map(entry => {\r\n    const entryDate = new Date(entry.metadata.date);\r\n    const hour = entryDate.getHours();\r\n\r\n    // Map the hours to time blocks (morning, afternoon, evening)\r\n    if (hour < 12) return 'Morning';\r\n    if (hour < 18) return 'Afternoon';\r\n    return 'Evening';\r\n  });\r\n\r\n  // Create the chart data\r\n  const data = {\r\n    labels: labels,\r\n    datasets: [\r\n      {\r\n        label: 'Timeline',\r\n        data: timeBlocks,\r\n        borderColor: 'rgba(75, 192, 192, 1)', // Line color\r\n        backgroundColor: 'rgba(75, 192, 192, 0.2)', // Area under line color\r\n        fill: false,\r\n        tension: 0.4,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    scales: {\r\n      x: {\r\n        title: {\r\n          display: true,\r\n          text: 'Date',\r\n        },\r\n      },\r\n      y: {\r\n        ticks: {\r\n          callback: function (value) {\r\n            return value; // Show the time block label on the Y-axis\r\n          },\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: 'Time Block',\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function (tooltipItem) {\r\n            return `Time Block: ${tooltipItem.raw}`;\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Entry Timeline</h3>\r\n      <Line data={data} options={options} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EntryTimeline;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}