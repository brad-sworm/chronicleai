{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brads\\\\memory_app\\\\my-frontend\\\\src\\\\components\\\\JournalEntry.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MediaUpload from './MediaUpload';\nimport SpeechToText from './SpeechToText';\nimport { useUser } from '../UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JournalEntry = () => {\n  _s();\n  const {\n    user\n  } = useUser(); // Access the user from context\n  const [text, setText] = useState('');\n  const [metadata, setMetadata] = useState({\n    startTime: null,\n    endTime: null,\n    duration: null,\n    date: new Date().toISOString().split('T')[0],\n    keywords: [],\n    names: []\n  });\n  const [selectedMedia, setSelectedMedia] = useState([]);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    const today = new Date().toISOString().split('T')[0]; // Get date in YYYY-MM-DD format\n    setMetadata(prevMetadata => ({\n      ...prevMetadata,\n      date: today\n    }));\n  }, []);\n  const handleSubmit = async () => {\n    if (!user || !user.username) {\n      setMessage('User username is missing. Please log in again.');\n      return;\n    }\n    setIsSubmitting(true);\n    setMessage('');\n    try {\n      const formData = new FormData();\n      formData.append('text', text);\n      formData.append('metadata', JSON.stringify(metadata));\n      selectedMedia.forEach(file => formData.append('media', file));\n      formData.append('user', user.username); // Use the dynamically stored username instead of user.id\n\n      const response = await fetch('http://localhost:3001/journal-entries', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) throw new Error('Failed to submit journal entry');\n      const data = await response.json();\n      setMessage('Journal entry submitted successfully!');\n      console.log('Submission response:', data);\n    } catch (error) {\n      console.error('Error submitting journal entry:', error.message);\n      setMessage('An error occurred.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create Journal Entry\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SpeechToText, {\n      onTextChange: (text, meta) => {\n        setText(text);\n        setMetadata(meta);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MediaUpload, {\n      onMediaSelect: setSelectedMedia\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      disabled: isSubmitting,\n      children: isSubmitting ? 'Submitting...' : 'Submit'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(JournalEntry, \"9hNmJTBK5/j4qrklBQkANnYTR78=\", false, function () {\n  return [useUser];\n});\n_c = JournalEntry;\nexport default JournalEntry;\nvar _c;\n$RefreshReg$(_c, \"JournalEntry\");","map":{"version":3,"names":["React","useState","useEffect","MediaUpload","SpeechToText","useUser","jsxDEV","_jsxDEV","JournalEntry","_s","user","text","setText","metadata","setMetadata","startTime","endTime","duration","date","Date","toISOString","split","keywords","names","selectedMedia","setSelectedMedia","isSubmitting","setIsSubmitting","message","setMessage","today","prevMetadata","handleSubmit","username","formData","FormData","append","JSON","stringify","forEach","file","response","fetch","method","body","ok","Error","data","json","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onTextChange","meta","onMediaSelect","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/brads/memory_app/my-frontend/src/components/JournalEntry.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport MediaUpload from './MediaUpload';\r\nimport SpeechToText from './SpeechToText';\r\nimport { useUser } from '../UserContext';\r\n\r\nconst JournalEntry = () => {\r\n  const { user } = useUser(); // Access the user from context\r\n  const [text, setText] = useState('');\r\n  const [metadata, setMetadata] = useState({\r\n    startTime: null,\r\n    endTime: null,\r\n    duration: null,\r\n    date: new Date().toISOString().split('T')[0],\r\n    keywords: [],\r\n    names: [],\r\n  });\r\n  const [selectedMedia, setSelectedMedia] = useState([]);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n\r\n\r\n  useEffect(() => {\r\n    const today = new Date().toISOString().split('T')[0]; // Get date in YYYY-MM-DD format\r\n    setMetadata((prevMetadata) => ({\r\n      ...prevMetadata,\r\n      date: today,\r\n    }));\r\n  }, []);\r\n\r\n  const handleSubmit = async () => {\r\n    if (!user || !user.username) {\r\n      setMessage('User username is missing. Please log in again.');\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n    setMessage('');\r\n\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('text', text);\r\n      formData.append('metadata', JSON.stringify(metadata));\r\n      selectedMedia.forEach((file) => formData.append('media', file));\r\n      formData.append('user', user.username); // Use the dynamically stored username instead of user.id\r\n\r\n      const response = await fetch('http://localhost:3001/journal-entries', {\r\n        method: 'POST',\r\n        body: formData,\r\n        \r\n      });\r\n\r\n      if (!response.ok) throw new Error('Failed to submit journal entry');\r\n\r\n      const data = await response.json();\r\n      setMessage('Journal entry submitted successfully!');\r\n      console.log('Submission response:', data);\r\n    } catch (error) {\r\n      console.error('Error submitting journal entry:', error.message);\r\n      setMessage('An error occurred.');\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Create Journal Entry</h2>\r\n      <SpeechToText onTextChange={(text, meta) => {\r\n        setText(text);\r\n        setMetadata(meta);\r\n      }} />\r\n      <MediaUpload onMediaSelect={setSelectedMedia} />\r\n      <button onClick={handleSubmit} disabled={isSubmitting}>\r\n        {isSubmitting ? 'Submitting...' : 'Submit'}\r\n      </button>\r\n      {message && <p>{message}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JournalEntry;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,SAASC,OAAO,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM;IAAEC;EAAK,CAAC,GAAGL,OAAO,CAAC,CAAC,CAAC,CAAC;EAC5B,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC;IACvCc,SAAS,EAAE,IAAI;IACfC,OAAO,EAAE,IAAI;IACbC,QAAQ,EAAE,IAAI;IACdC,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC5CC,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE;EACT,CAAC,CAAC;EACF,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACyB,YAAY,EAAEC,eAAe,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAAC2B,OAAO,EAAEC,UAAU,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAG1CC,SAAS,CAAC,MAAM;IACd,MAAM4B,KAAK,GAAG,IAAIX,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtDP,WAAW,CAAEiB,YAAY,KAAM;MAC7B,GAAGA,YAAY;MACfb,IAAI,EAAEY;IACR,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,CAACtB,IAAI,IAAI,CAACA,IAAI,CAACuB,QAAQ,EAAE;MAC3BJ,UAAU,CAAC,gDAAgD,CAAC;MAC5D;IACF;IAEAF,eAAe,CAAC,IAAI,CAAC;IACrBE,UAAU,CAAC,EAAE,CAAC;IAEd,IAAI;MACF,MAAMK,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEzB,IAAI,CAAC;MAC7BuB,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAACzB,QAAQ,CAAC,CAAC;MACrDW,aAAa,CAACe,OAAO,CAAEC,IAAI,IAAKN,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEI,IAAI,CAAC,CAAC;MAC/DN,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE1B,IAAI,CAACuB,QAAQ,CAAC,CAAC,CAAC;;MAExC,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;QACpEC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEV;MAER,CAAC,CAAC;MAEF,IAAI,CAACO,QAAQ,CAACI,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;MAEnE,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClCnB,UAAU,CAAC,uCAAuC,CAAC;MACnDoB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEH,IAAI,CAAC;IAC3C,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAACvB,OAAO,CAAC;MAC/DC,UAAU,CAAC,oBAAoB,CAAC;IAClC,CAAC,SAAS;MACRF,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC;EAED,oBACEpB,OAAA;IAAA6C,QAAA,gBACE7C,OAAA;MAAA6C,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7BjD,OAAA,CAACH,YAAY;MAACqD,YAAY,EAAEA,CAAC9C,IAAI,EAAE+C,IAAI,KAAK;QAC1C9C,OAAO,CAACD,IAAI,CAAC;QACbG,WAAW,CAAC4C,IAAI,CAAC;MACnB;IAAE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACLjD,OAAA,CAACJ,WAAW;MAACwD,aAAa,EAAElC;IAAiB;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChDjD,OAAA;MAAQqD,OAAO,EAAE5B,YAAa;MAAC6B,QAAQ,EAAEnC,YAAa;MAAA0B,QAAA,EACnD1B,YAAY,GAAG,eAAe,GAAG;IAAQ;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CAAC,EACR5B,OAAO,iBAAIrB,OAAA;MAAA6C,QAAA,EAAIxB;IAAO;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzB,CAAC;AAEV,CAAC;AAAC/C,EAAA,CAzEID,YAAY;EAAA,QACCH,OAAO;AAAA;AAAAyD,EAAA,GADpBtD,YAAY;AA2ElB,eAAeA,YAAY;AAAC,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}