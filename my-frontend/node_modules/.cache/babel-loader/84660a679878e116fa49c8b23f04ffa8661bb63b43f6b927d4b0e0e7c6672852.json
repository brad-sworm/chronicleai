{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brads\\\\memory_app\\\\my-frontend\\\\src\\\\components\\\\SpeechToText.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport MetadataDisplay from './MetadataDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpeechToText = ({\n  onTranscription,\n  onMetadataChange\n}) => {\n  _s();\n  const [text, setText] = useState('');\n  const [isListening, setIsListening] = useState(false);\n  const [metadata, setMetadata] = useState({\n    startTime: null,\n    endTime: null,\n    duration: null,\n    date: null,\n    keywords: [],\n    names: [],\n    text: '' // Ensure text is included in metadata\n  });\n  const recognitionRef = useRef(null);\n  const createRecognitionInstance = () => {\n    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n    recognition.continuous = true;\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n    recognition.onresult = event => {\n      const transcript = Array.from(event.results).map(result => result[0].transcript).join('');\n      console.log('Transcript received:', transcript);\n      setText(prevText => {\n        const newText = prevText + ' ' + transcript;\n        updateMetadata({\n          text: newText\n        });\n        return newText;\n      });\n    };\n    recognition.onerror = event => {\n      console.error('Speech recognition error:', event.error);\n      setIsListening(false);\n      recognition.stop();\n    };\n    recognition.onend = () => {\n      console.log('Recognition ended. isListening:', isListening);\n      if (isListening) {\n        recognition.start();\n      }\n    };\n    recognitionRef.current = recognition;\n  };\n  const startListening = () => {\n    console.log('Starting listening');\n    createRecognitionInstance();\n    const startTime = metadata.startTime ? metadata.startTime : new Date();\n    updateMetadata({\n      startTime,\n      endTime: null,\n      duration: null,\n      date: new Date()\n    });\n    setIsListening(true);\n    recognitionRef.current.start();\n  };\n  const stopListening = () => {\n    console.log('Stopping listening');\n    if (recognitionRef.current) {\n      const endTime = new Date();\n      const duration = endTime - metadata.startTime;\n      updateMetadata({\n        endTime,\n        duration\n      });\n      setIsListening(false);\n      recognitionRef.current.stop();\n    }\n  };\n  const updateMetadata = updates => {\n    setMetadata(prev => {\n      const updatedMetadata = {\n        ...prev,\n        ...updates\n      };\n      console.log('Updated metadata:', updatedMetadata);\n      if (onMetadataChange) {\n        onMetadataChange(updatedMetadata);\n      }\n      return updatedMetadata;\n    });\n  };\n  const extractMetadata = async () => {\n    if (!text.trim()) {\n      return;\n    }\n\n    // Stop listening before extracting metadata\n    stopListening();\n    console.log('Extracting metadata');\n    try {\n      const response = await fetch('http://localhost:3001/api/extract-metadata', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Response from backend:', data);\n\n      // Extract and clean keywords and names\n      const keywords = Array.isArray(data.keywords) ? data.keywords.filter(kw => kw.trim() !== '') : [];\n      const names = Array.isArray(data.names) ? data.names.filter(name => name.trim() !== '') : [];\n      if (keywords.length === 0 && names.length === 0) {\n        throw new Error('Invalid response: Keywords and Names are empty or undefined');\n      }\n\n      // Update metadata with keywords and names\n      updateMetadata({\n        keywords: keywords.length > 0 ? keywords : metadata.keywords,\n        names: names.length > 0 ? names : metadata.names\n      });\n    } catch (error) {\n      console.error('Error extracting metadata:', error);\n    }\n  };\n  const handleTextChange = event => {\n    const newText = event.target.value;\n    setText(newText);\n    updateMetadata({\n      text: newText,\n      endTime: new Date()\n    });\n  };\n  const handleKeywordsChange = event => {\n    const keywords = event.target.value.split(',').map(kw => kw.trim());\n    updateMetadata({\n      keywords\n    });\n  };\n  const handleNamesChange = event => {\n    const names = event.target.value.split(',').map(name => name.trim());\n    updateMetadata({\n      names\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      marginTop: '50px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Speech to Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '20px 0'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: isListening ? stopListening : startListening,\n          children: isListening ? 'Stop Listening' : 'Start Listening'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: text,\n        rows: \"10\",\n        cols: \"50\",\n        onChange: handleTextChange,\n        placeholder: \"You can enter text or click start listening to use the speech to text capability. Your text will appear in this window...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '20px 0'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: extractMetadata,\n          children: \"Extract Metadata\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MetadataDisplay, {\n      metadata: metadata\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n_s(SpeechToText, \"4A4FiyvDd16l0HvueHkVYAsRH+k=\");\n_c = SpeechToText;\nexport default SpeechToText;\nvar _c;\n$RefreshReg$(_c, \"SpeechToText\");","map":{"version":3,"names":["React","useState","useEffect","useRef","MetadataDisplay","jsxDEV","_jsxDEV","SpeechToText","onTranscription","onMetadataChange","_s","text","setText","isListening","setIsListening","metadata","setMetadata","startTime","endTime","duration","date","keywords","names","recognitionRef","createRecognitionInstance","recognition","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","transcript","Array","from","results","map","result","join","console","log","prevText","newText","updateMetadata","onerror","error","stop","onend","start","current","startListening","Date","stopListening","updates","prev","updatedMetadata","extractMetadata","trim","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","isArray","filter","kw","name","length","handleTextChange","target","value","handleKeywordsChange","split","handleNamesChange","style","display","flexDirection","alignItems","marginTop","children","textAlign","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","margin","onClick","rows","cols","onChange","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/brads/memory_app/my-frontend/src/components/SpeechToText.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport MetadataDisplay from './MetadataDisplay';\r\n\r\nconst SpeechToText = ({ onTranscription, onMetadataChange }) => {\r\n  const [text, setText] = useState('');\r\n  const [isListening, setIsListening] = useState(false);\r\n  const [metadata, setMetadata] = useState({\r\n    startTime: null,\r\n    endTime: null,\r\n    duration: null,\r\n    date: null,\r\n    keywords: [],\r\n    names: [],\r\n    text: '', // Ensure text is included in metadata\r\n  });\r\n\r\n  const recognitionRef = useRef(null);\r\n\r\n  const createRecognitionInstance = () => {\r\n    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\r\n    recognition.continuous = true;\r\n    recognition.interimResults = false;\r\n    recognition.lang = 'en-US';\r\n\r\n    recognition.onresult = (event) => {\r\n      const transcript = Array.from(event.results)\r\n        .map((result) => result[0].transcript)\r\n        .join('');\r\n      console.log('Transcript received:', transcript);\r\n      setText((prevText) => {\r\n        const newText = prevText + ' ' + transcript;\r\n        updateMetadata({ text: newText });\r\n        return newText;\r\n      });\r\n    };\r\n\r\n    recognition.onerror = (event) => {\r\n      console.error('Speech recognition error:', event.error);\r\n      setIsListening(false);\r\n      recognition.stop();\r\n    };\r\n\r\n    recognition.onend = () => {\r\n      console.log('Recognition ended. isListening:', isListening);\r\n      if (isListening) {\r\n        recognition.start();\r\n      }\r\n    };\r\n\r\n    recognitionRef.current = recognition;\r\n  };\r\n\r\n  const startListening = () => {\r\n    console.log('Starting listening');\r\n    createRecognitionInstance();\r\n    const startTime = metadata.startTime ? metadata.startTime : new Date();\r\n    updateMetadata({\r\n      startTime,\r\n      endTime: null,\r\n      duration: null,\r\n      date: new Date(),\r\n    });\r\n    setIsListening(true);\r\n    recognitionRef.current.start();\r\n  };\r\n\r\n  const stopListening = () => {\r\n    console.log('Stopping listening');\r\n    if (recognitionRef.current) {\r\n      const endTime = new Date();\r\n      const duration = endTime - metadata.startTime;\r\n      updateMetadata({\r\n        endTime,\r\n        duration,\r\n      });\r\n      setIsListening(false);\r\n      recognitionRef.current.stop();\r\n    }\r\n  };\r\n\r\n  const updateMetadata = (updates) => {\r\n    setMetadata((prev) => {\r\n      const updatedMetadata = { ...prev, ...updates };\r\n      console.log('Updated metadata:', updatedMetadata);\r\n      if (onMetadataChange) {\r\n        onMetadataChange(updatedMetadata);\r\n      }\r\n      return updatedMetadata;\r\n    });\r\n  };\r\n\r\n  const extractMetadata = async () => {\r\n    if (!text.trim()) {\r\n      return;\r\n    }\r\n\r\n    // Stop listening before extracting metadata\r\n    stopListening();\r\n\r\n    console.log('Extracting metadata');\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/extract-metadata', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ text }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Response from backend:', data);\r\n\r\n      // Extract and clean keywords and names\r\n      const keywords = Array.isArray(data.keywords) ? data.keywords.filter(kw => kw.trim() !== '') : [];\r\n      const names = Array.isArray(data.names) ? data.names.filter(name => name.trim() !== '') : [];\r\n\r\n      if (keywords.length === 0 && names.length === 0) {\r\n        throw new Error('Invalid response: Keywords and Names are empty or undefined');\r\n      }\r\n\r\n      // Update metadata with keywords and names\r\n      updateMetadata({\r\n        keywords: keywords.length > 0 ? keywords : metadata.keywords,\r\n        names: names.length > 0 ? names : metadata.names,\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('Error extracting metadata:', error);\r\n    }\r\n  };\r\n\r\n  const handleTextChange = (event) => {\r\n    const newText = event.target.value;\r\n    setText(newText);\r\n    updateMetadata({ text: newText, endTime: new Date() });\r\n  };\r\n\r\n  const handleKeywordsChange = (event) => {\r\n    const keywords = event.target.value.split(',').map(kw => kw.trim());\r\n    updateMetadata({ keywords });\r\n  };\r\n\r\n  const handleNamesChange = (event) => {\r\n    const names = event.target.value.split(',').map(name => name.trim());\r\n    updateMetadata({ names });\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '50px' }}>\r\n      <div style={{ textAlign: 'center', marginBottom: '20px' }}>\r\n        <h1>Speech to Text</h1>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <button onClick={isListening ? stopListening : startListening}>\r\n            {isListening ? 'Stop Listening' : 'Start Listening'}\r\n          </button>\r\n        </div>\r\n        <textarea\r\n          value={text}\r\n          rows=\"10\"\r\n          cols=\"50\"\r\n          onChange={handleTextChange}\r\n          placeholder=\"You can enter text or click start listening to use the speech to text capability. Your text will appear in this window...\"\r\n        />\r\n        <div style={{ margin: '20px 0' }}>\r\n          <button onClick={extractMetadata}>\r\n            Extract Metadata\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <MetadataDisplay metadata={metadata} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpeechToText;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}