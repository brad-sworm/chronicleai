{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brads\\\\memory_app\\\\my-frontend\\\\src\\\\components\\\\SentimentAnalysis.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, Title, Tooltip, Legend, LineElement, PointElement } from 'chart.js';\n\n// Register necessary Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, Title, Tooltip, Legend, LineElement, PointElement);\nconst SentimentAnalysis = ({\n  entries\n}) => {\n  _s();\n  const [sentiments, setSentiments] = useState([]);\n  useEffect(() => {\n    // If no entries are passed, use default data for demonstration\n    const analyzeSentiment = async () => {\n      const data = entries.length > 0 ? entries : getDefaultEntries();\n      const sentiments = await Promise.all(data.map(entry => fetchSentiment(entry.text)));\n      setSentiments(sentiments);\n    };\n    analyzeSentiment();\n  }, [entries]);\n  const fetchSentiment = async text => {\n    // Placeholder for sentiment analysis API call\n    if (text.includes('good') || text.includes('happy')) {\n      return 'positive';\n    } else if (text.includes('bad') || text.includes('sad')) {\n      return 'negative';\n    }\n    return 'neutral'; // Default to neutral\n  };\n  const getDefaultEntries = () => {\n    return [{\n      text: 'I am feeling really good today!'\n    }, {\n      text: 'This is an awful experience, I am so disappointed.'\n    }, {\n      text: 'I am just feeling neutral, nothing too exciting.'\n    }, {\n      text: 'I had an amazing day! Everything went perfectly.'\n    }, {\n      text: 'I am so sad about the news today, everything feels terrible.'\n    }, {\n      text: 'It’s an average day, not too bad, not too great.'\n    }];\n  };\n\n  // Convert sentiments to numeric values\n  const sentimentValues = sentiments.map(sentiment => {\n    if (sentiment === 'positive') return 1;\n    if (sentiment === 'negative') return -1;\n    return 0; // Neutral sentiment\n  });\n\n  // Prepare data for the line chart\n  const chartData = {\n    labels: (entries.length > 0 ? entries : getDefaultEntries()).map((entry, index) => `Entry ${index + 1}`),\n    // Use entry numbers as labels\n    datasets: [{\n      label: 'Sentiment Over Entries',\n      data: sentimentValues,\n      borderColor: 'rgba(75, 192, 192, 1)',\n      // Line color\n      backgroundColor: 'rgba(75, 192, 192, 0.2)',\n      // Line fill color\n      fill: true,\n      tension: 0.4 // Smooth curve for the line\n    }]\n  };\n\n  // Chart options configuration\n  const options = {\n    responsive: true,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Sentiment Analysis Over Time'\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false\n      }\n    },\n    scales: {\n      y: {\n        min: -1,\n        max: 1,\n        ticks: {\n          stepSize: 1,\n          callback: value => {\n            if (value === 1) return 'Positive';\n            if (value === -1) return 'Negative';\n            return 'Neutral';\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Sentiment Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"Your data will look something like this once you have journal entries.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(SentimentAnalysis, \"1NNiX6nmnMl8RaepDjHjvyr8D0M=\");\n_c = SentimentAnalysis;\nexport default SentimentAnalysis;\nvar _c;\n$RefreshReg$(_c, \"SentimentAnalysis\");","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","ChartJS","CategoryScale","LinearScale","Title","Tooltip","Legend","LineElement","PointElement","jsxDEV","_jsxDEV","register","SentimentAnalysis","entries","_s","sentiments","setSentiments","analyzeSentiment","data","length","getDefaultEntries","Promise","all","map","entry","fetchSentiment","text","includes","sentimentValues","sentiment","chartData","labels","index","datasets","label","borderColor","backgroundColor","fill","tension","options","responsive","plugins","title","display","tooltip","mode","intersect","scales","y","min","max","ticks","stepSize","callback","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/brads/memory_app/my-frontend/src/components/SentimentAnalysis.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, Title, Tooltip, Legend, LineElement, PointElement } from 'chart.js';\r\n\r\n// Register necessary Chart.js components\r\nChartJS.register(CategoryScale, LinearScale, Title, Tooltip, Legend, LineElement, PointElement);\r\n\r\nconst SentimentAnalysis = ({ entries }) => {\r\n  const [sentiments, setSentiments] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // If no entries are passed, use default data for demonstration\r\n    const analyzeSentiment = async () => {\r\n      const data = entries.length > 0 ? entries : getDefaultEntries();\r\n      const sentiments = await Promise.all(data.map(entry => fetchSentiment(entry.text)));\r\n      setSentiments(sentiments);\r\n    };\r\n\r\n    analyzeSentiment();\r\n  }, [entries]);\r\n\r\n  const fetchSentiment = async (text) => {\r\n    // Placeholder for sentiment analysis API call\r\n    if (text.includes('good') || text.includes('happy')) {\r\n      return 'positive';\r\n    } else if (text.includes('bad') || text.includes('sad')) {\r\n      return 'negative';\r\n    }\r\n    return 'neutral'; // Default to neutral\r\n  };\r\n\r\n  const getDefaultEntries = () => {\r\n    return [\r\n      { text: 'I am feeling really good today!' },\r\n      { text: 'This is an awful experience, I am so disappointed.' },\r\n      { text: 'I am just feeling neutral, nothing too exciting.' },\r\n      { text: 'I had an amazing day! Everything went perfectly.' },\r\n      { text: 'I am so sad about the news today, everything feels terrible.' },\r\n      { text: 'It’s an average day, not too bad, not too great.' },\r\n    ];\r\n  };\r\n\r\n  // Convert sentiments to numeric values\r\n  const sentimentValues = sentiments.map(sentiment => {\r\n    if (sentiment === 'positive') return 1;\r\n    if (sentiment === 'negative') return -1;\r\n    return 0; // Neutral sentiment\r\n  });\r\n\r\n  // Prepare data for the line chart\r\n  const chartData = {\r\n    labels: (entries.length > 0 ? entries : getDefaultEntries()).map((entry, index) => `Entry ${index + 1}`), // Use entry numbers as labels\r\n    datasets: [\r\n      {\r\n        label: 'Sentiment Over Entries',\r\n        data: sentimentValues,\r\n        borderColor: 'rgba(75, 192, 192, 1)', // Line color\r\n        backgroundColor: 'rgba(75, 192, 192, 0.2)', // Line fill color\r\n        fill: true,\r\n        tension: 0.4, // Smooth curve for the line\r\n      },\r\n    ],\r\n  };\r\n\r\n  // Chart options configuration\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      title: {\r\n        display: true,\r\n        text: 'Sentiment Analysis Over Time',\r\n      },\r\n      tooltip: {\r\n        mode: 'index',\r\n        intersect: false,\r\n      },\r\n    },\r\n    scales: {\r\n      y: {\r\n        min: -1,\r\n        max: 1,\r\n        ticks: {\r\n          stepSize: 1,\r\n          callback: (value) => {\r\n            if (value === 1) return 'Positive';\r\n            if (value === -1) return 'Negative';\r\n            return 'Neutral';\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Sentiment Analysis</h3>\r\n      <Line data={chartData} options={options} />\r\n      <p><i>Your data will look something like this once you have journal entries.</i></p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SentimentAnalysis;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,KAAK,IAAIC,OAAO,EAAEC,aAAa,EAAEC,WAAW,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,EAAEC,WAAW,EAAEC,YAAY,QAAQ,UAAU;;AAE1H;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAT,OAAO,CAACU,QAAQ,CAACT,aAAa,EAAEC,WAAW,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,EAAEC,WAAW,EAAEC,YAAY,CAAC;AAE/F,MAAMI,iBAAiB,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACzC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACd;IACA,MAAMoB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,MAAMC,IAAI,GAAGL,OAAO,CAACM,MAAM,GAAG,CAAC,GAAGN,OAAO,GAAGO,iBAAiB,CAAC,CAAC;MAC/D,MAAML,UAAU,GAAG,MAAMM,OAAO,CAACC,GAAG,CAACJ,IAAI,CAACK,GAAG,CAACC,KAAK,IAAIC,cAAc,CAACD,KAAK,CAACE,IAAI,CAAC,CAAC,CAAC;MACnFV,aAAa,CAACD,UAAU,CAAC;IAC3B,CAAC;IAEDE,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,CAACJ,OAAO,CAAC,CAAC;EAEb,MAAMY,cAAc,GAAG,MAAOC,IAAI,IAAK;IACrC;IACA,IAAIA,IAAI,CAACC,QAAQ,CAAC,MAAM,CAAC,IAAID,IAAI,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;MACnD,OAAO,UAAU;IACnB,CAAC,MAAM,IAAID,IAAI,CAACC,QAAQ,CAAC,KAAK,CAAC,IAAID,IAAI,CAACC,QAAQ,CAAC,KAAK,CAAC,EAAE;MACvD,OAAO,UAAU;IACnB;IACA,OAAO,SAAS,CAAC,CAAC;EACpB,CAAC;EAED,MAAMP,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,OAAO,CACL;MAAEM,IAAI,EAAE;IAAkC,CAAC,EAC3C;MAAEA,IAAI,EAAE;IAAqD,CAAC,EAC9D;MAAEA,IAAI,EAAE;IAAmD,CAAC,EAC5D;MAAEA,IAAI,EAAE;IAAmD,CAAC,EAC5D;MAAEA,IAAI,EAAE;IAA+D,CAAC,EACxE;MAAEA,IAAI,EAAE;IAAmD,CAAC,CAC7D;EACH,CAAC;;EAED;EACA,MAAME,eAAe,GAAGb,UAAU,CAACQ,GAAG,CAACM,SAAS,IAAI;IAClD,IAAIA,SAAS,KAAK,UAAU,EAAE,OAAO,CAAC;IACtC,IAAIA,SAAS,KAAK,UAAU,EAAE,OAAO,CAAC,CAAC;IACvC,OAAO,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC;;EAEF;EACA,MAAMC,SAAS,GAAG;IAChBC,MAAM,EAAE,CAAClB,OAAO,CAACM,MAAM,GAAG,CAAC,GAAGN,OAAO,GAAGO,iBAAiB,CAAC,CAAC,EAAEG,GAAG,CAAC,CAACC,KAAK,EAAEQ,KAAK,KAAK,SAASA,KAAK,GAAG,CAAC,EAAE,CAAC;IAAE;IAC1GC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,wBAAwB;MAC/BhB,IAAI,EAAEU,eAAe;MACrBO,WAAW,EAAE,uBAAuB;MAAE;MACtCC,eAAe,EAAE,yBAAyB;MAAE;MAC5CC,IAAI,EAAE,IAAI;MACVC,OAAO,EAAE,GAAG,CAAE;IAChB,CAAC;EAEL,CAAC;;EAED;EACA,MAAMC,OAAO,GAAG;IACdC,UAAU,EAAE,IAAI;IAChBC,OAAO,EAAE;MACPC,KAAK,EAAE;QACLC,OAAO,EAAE,IAAI;QACbjB,IAAI,EAAE;MACR,CAAC;MACDkB,OAAO,EAAE;QACPC,IAAI,EAAE,OAAO;QACbC,SAAS,EAAE;MACb;IACF,CAAC;IACDC,MAAM,EAAE;MACNC,CAAC,EAAE;QACDC,GAAG,EAAE,CAAC,CAAC;QACPC,GAAG,EAAE,CAAC;QACNC,KAAK,EAAE;UACLC,QAAQ,EAAE,CAAC;UACXC,QAAQ,EAAGC,KAAK,IAAK;YACnB,IAAIA,KAAK,KAAK,CAAC,EAAE,OAAO,UAAU;YAClC,IAAIA,KAAK,KAAK,CAAC,CAAC,EAAE,OAAO,UAAU;YACnC,OAAO,SAAS;UAClB;QACF;MACF;IACF;EACF,CAAC;EAED,oBACE5C,OAAA;IAAA6C,QAAA,gBACE7C,OAAA;MAAA6C,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3BjD,OAAA,CAACX,IAAI;MAACmB,IAAI,EAAEY,SAAU;MAACS,OAAO,EAAEA;IAAQ;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC3CjD,OAAA;MAAA6C,QAAA,eAAG7C,OAAA;QAAA6C,QAAA,EAAG;MAAsE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjF,CAAC;AAEV,CAAC;AAAC7C,EAAA,CA7FIF,iBAAiB;AAAAgD,EAAA,GAAjBhD,iBAAiB;AA+FvB,eAAeA,iBAAiB;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}