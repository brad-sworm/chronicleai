{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brads\\\\memory_app\\\\my-frontend\\\\src\\\\components\\\\KeywordAnalysis.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from 'chart.js';\nimport { useUser } from '../UserContext'; // Import the useUser hook\n\n// Registering necessary Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\nconst KeywordAnalysis = () => {\n  _s();\n  const {\n    user\n  } = useUser(); // Get user data from UserContext\n  const [journalEntries, setJournalEntries] = useState([]);\n  const [keywordCounts, setKeywordCounts] = useState({});\n\n  // Default hardcoded keywords and counts to match the default data\n  const defaultKeywords = ['stressed', 'overwhelmed', 'tough', 'personal', 'work', 'future', 'neutral'];\n  const defaultCounts = [5, 4, 3, 3, 2, 1, 1]; // Emphasizing negative sentiment\n\n  // Function to count keyword occurrences in the journal entries\n  const countKeywords = entries => {\n    const keywordCount = {};\n\n    // Loop through each journal entry and its keywords\n    entries.forEach(entry => {\n      entry.metadata.keywords.forEach(keyword => {\n        // Increment keyword count or initialize it if not present\n        keywordCount[keyword] = (keywordCount[keyword] || 0) + 1;\n      });\n    });\n    return keywordCount;\n  };\n  useEffect(() => {\n    console.log('User data from context:', user); // Debugging user data\n\n    if (user && user.username) {\n      // Fetch journal entries if the user is signed in\n      const fetchJournalEntries = async () => {\n        try {\n          const response = await fetch(`http://localhost:3001/journal-entries/${user.username}`);\n          if (!response.ok) {\n            throw new Error('Failed to fetch journal entries');\n          }\n          const data = await response.json();\n          console.log('Fetched Journal Entries:', data);\n          setJournalEntries(data);\n\n          // Count keywords from the journal entries\n          const counts = countKeywords(data);\n          setKeywordCounts(counts);\n        } catch (error) {\n          console.error('Error fetching journal entries:', error);\n        }\n      };\n      fetchJournalEntries();\n    } else {\n      // Use default keyword counts if not signed in\n      setKeywordCounts(defaultKeywords.reduce((acc, keyword, index) => {\n        acc[keyword] = defaultCounts[index];\n        return acc;\n      }, {}));\n      console.log('Using default keyword counts:', defaultCounts); // Debugging default counts\n    }\n  }, [user]); // Re-run effect when user changes\n\n  // Prepare chart data\n  const keywords = Object.keys(keywordCounts);\n  const counts = keywords.map(keyword => keywordCounts[keyword]);\n  const chartData = {\n    labels: keywords,\n    datasets: [{\n      label: 'Keyword Count',\n      data: counts,\n      backgroundColor: 'rgba(255, 99, 132, 0.6)',\n      // Negative sentiment color\n      borderColor: 'rgba(255, 99, 132, 1)',\n      borderWidth: 1\n    }]\n  };\n\n  // Chart options configuration\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: 'Keyword Analysis'\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(KeywordAnalysis, \"ijuS0QumhhLOrPoyqJbkOxHM0h4=\", false, function () {\n  return [useUser];\n});\n_c = KeywordAnalysis;\nexport default KeywordAnalysis;\nvar _c;\n$RefreshReg$(_c, \"KeywordAnalysis\");","map":{"version":3,"names":["React","useEffect","useState","Bar","Chart","ChartJS","BarElement","CategoryScale","LinearScale","Title","Tooltip","Legend","useUser","jsxDEV","_jsxDEV","register","KeywordAnalysis","_s","user","journalEntries","setJournalEntries","keywordCounts","setKeywordCounts","defaultKeywords","defaultCounts","countKeywords","entries","keywordCount","forEach","entry","metadata","keywords","keyword","console","log","username","fetchJournalEntries","response","fetch","ok","Error","data","json","counts","error","reduce","acc","index","Object","keys","map","chartData","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","plugins","legend","display","title","text","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/brads/memory_app/my-frontend/src/components/KeywordAnalysis.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  BarElement,\r\n  CategoryScale,\r\n  LinearScale,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { useUser } from '../UserContext'; // Import the useUser hook\r\n\r\n// Registering necessary Chart.js components\r\nChartJS.register(BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\r\n\r\nconst KeywordAnalysis = () => {\r\n  const { user } = useUser(); // Get user data from UserContext\r\n  const [journalEntries, setJournalEntries] = useState([]);\r\n  const [keywordCounts, setKeywordCounts] = useState({});\r\n\r\n  // Default hardcoded keywords and counts to match the default data\r\n  const defaultKeywords = ['stressed', 'overwhelmed', 'tough', 'personal', 'work', 'future', 'neutral'];\r\n  const defaultCounts = [5, 4, 3, 3, 2, 1, 1]; // Emphasizing negative sentiment\r\n\r\n  // Function to count keyword occurrences in the journal entries\r\n  const countKeywords = (entries) => {\r\n    const keywordCount = {};\r\n\r\n    // Loop through each journal entry and its keywords\r\n    entries.forEach((entry) => {\r\n      entry.metadata.keywords.forEach((keyword) => {\r\n        // Increment keyword count or initialize it if not present\r\n        keywordCount[keyword] = (keywordCount[keyword] || 0) + 1;\r\n      });\r\n    });\r\n\r\n    return keywordCount;\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log('User data from context:', user); // Debugging user data\r\n\r\n    if (user && user.username) {\r\n      // Fetch journal entries if the user is signed in\r\n      const fetchJournalEntries = async () => {\r\n        try {\r\n          const response = await fetch(`http://localhost:3001/journal-entries/${user.username}`);\r\n          if (!response.ok) {\r\n            throw new Error('Failed to fetch journal entries');\r\n          }\r\n          const data = await response.json();\r\n          console.log('Fetched Journal Entries:', data);\r\n          setJournalEntries(data);\r\n\r\n          // Count keywords from the journal entries\r\n          const counts = countKeywords(data);\r\n          setKeywordCounts(counts);\r\n        } catch (error) {\r\n          console.error('Error fetching journal entries:', error);\r\n        }\r\n      };\r\n\r\n      fetchJournalEntries();\r\n    } else {\r\n      // Use default keyword counts if not signed in\r\n      setKeywordCounts(\r\n        defaultKeywords.reduce((acc, keyword, index) => {\r\n          acc[keyword] = defaultCounts[index];\r\n          return acc;\r\n        }, {})\r\n      );\r\n      console.log('Using default keyword counts:', defaultCounts); // Debugging default counts\r\n    }\r\n  }, [user]); // Re-run effect when user changes\r\n\r\n  // Prepare chart data\r\n  const keywords = Object.keys(keywordCounts);\r\n  const counts = keywords.map((keyword) => keywordCounts[keyword]);\r\n\r\n  const chartData = {\r\n    labels: keywords,\r\n    datasets: [\r\n      {\r\n        label: 'Keyword Count',\r\n        data: counts,\r\n        backgroundColor: 'rgba(255, 99, 132, 0.6)', // Negative sentiment color\r\n        borderColor: 'rgba(255, 99, 132, 1)',\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  // Chart options configuration\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: 'Keyword Analysis',\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* Rendering the Bar chart */}\r\n      <Bar data={chartData} options={options} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KeywordAnalysis;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}