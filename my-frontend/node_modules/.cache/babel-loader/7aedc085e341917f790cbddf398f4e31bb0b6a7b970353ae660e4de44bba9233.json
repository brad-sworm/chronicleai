{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brads\\\\memory_app\\\\my-frontend\\\\src\\\\pages\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  console.log('Dashboard component rendering');\n  const {\n    user\n  } = useUser();\n  console.log('User data:', user); // Ensure the full user object is logged\n\n  const [journalEntries, setJournalEntries] = useState([]);\n  useEffect(() => {\n    const fetchJournalEntries = async () => {\n      if (user && user.username) {\n        try {\n          // Fetch journal entries based on the 'username'\n          const response = await fetch(`http://localhost:3001/journal-entries/${user.username}`);\n          if (!response.ok) {\n            throw new Error('Failed to fetch journal entries');\n          }\n          const data = await response.json();\n          console.log('Journal Entries from Backend:', data);\n          setJournalEntries(data);\n        } catch (error) {\n          console.error(error.message);\n        }\n      }\n    };\n    fetchJournalEntries();\n  }, [user]); // Add 'user' as a dependency to ensure the effect re-runs when 'user' changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Welcome, \", user === null || user === void 0 ? void 0 : user.username]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"User ID: \", user === null || user === void 0 ? void 0 : user.id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this), \" \", /*#__PURE__*/_jsxDEV(JournalEntryTable, {\n      journalEntries: journalEntries\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 7\n  }, this);\n};\n_s(Dashboard, \"X7DFqMyxfJ8iS4xC8SmBBsjEeUQ=\", true);\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["Dashboard","_s","console","log","user","useUser","journalEntries","setJournalEntries","useState","useEffect","fetchJournalEntries","username","response","fetch","ok","Error","data","json","error","message","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","id","JournalEntryTable","_c","$RefreshReg$"],"sources":["C:/Users/brads/memory_app/my-frontend/src/pages/Dashboard.js"],"sourcesContent":["const Dashboard = () => {\r\n    console.log('Dashboard component rendering');\r\n    const { user } = useUser();\r\n    console.log('User data:', user); // Ensure the full user object is logged\r\n  \r\n    const [journalEntries, setJournalEntries] = useState([]);\r\n  \r\n    useEffect(() => {\r\n      const fetchJournalEntries = async () => {\r\n        if (user && user.username) {\r\n          try {\r\n            // Fetch journal entries based on the 'username'\r\n            const response = await fetch(`http://localhost:3001/journal-entries/${user.username}`);\r\n            if (!response.ok) {\r\n              throw new Error('Failed to fetch journal entries');\r\n            }\r\n            const data = await response.json();\r\n            console.log('Journal Entries from Backend:', data);\r\n            setJournalEntries(data);\r\n          } catch (error) {\r\n            console.error(error.message);\r\n          }\r\n        }\r\n      };\r\n  \r\n      fetchJournalEntries();\r\n    }, [user]); // Add 'user' as a dependency to ensure the effect re-runs when 'user' changes\r\n  \r\n    return (\r\n      <div>\r\n        <h1>Welcome, {user?.username}</h1>\r\n        <p>User ID: {user?.id}</p> {/* Ensure the ID is displayed */}\r\n        <JournalEntryTable journalEntries={journalEntries} />\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default Dashboard;\r\n  "],"mappings":";;;AAAA,MAAMA,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpBC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;EAC5C,MAAM;IAAEC;EAAK,CAAC,GAAGC,OAAO,CAAC,CAAC;EAC1BH,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEC,IAAI,CAAC,CAAC,CAAC;;EAEjC,MAAM,CAACE,cAAc,EAAEC,iBAAiB,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAExDC,SAAS,CAAC,MAAM;IACd,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC,IAAIN,IAAI,IAAIA,IAAI,CAACO,QAAQ,EAAE;QACzB,IAAI;UACF;UACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyCT,IAAI,CAACO,QAAQ,EAAE,CAAC;UACtF,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;YAChB,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;UACpD;UACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;UAClCf,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEa,IAAI,CAAC;UAClDT,iBAAiB,CAACS,IAAI,CAAC;QACzB,CAAC,CAAC,OAAOE,KAAK,EAAE;UACdhB,OAAO,CAACgB,KAAK,CAACA,KAAK,CAACC,OAAO,CAAC;QAC9B;MACF;IACF,CAAC;IAEDT,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,CAACN,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEZ,oBACEgB,OAAA;IAAAC,QAAA,gBACED,OAAA;MAAAC,QAAA,GAAI,WAAS,EAACjB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEO,QAAQ;IAAA;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAClCL,OAAA;MAAAC,QAAA,GAAG,WAAS,EAACjB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEsB,EAAE;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,KAAC,eAC3BL,OAAA,CAACO,iBAAiB;MAACrB,cAAc,EAAEA;IAAe;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClD,CAAC;AAEV,CAAC;AAACxB,EAAA,CAnCED,SAAS;AAAA4B,EAAA,GAAT5B,SAAS;AAqCb,eAAeA,SAAS;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}