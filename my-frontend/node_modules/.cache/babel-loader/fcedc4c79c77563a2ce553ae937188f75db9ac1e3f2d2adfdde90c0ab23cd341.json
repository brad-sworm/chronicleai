{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brads\\\\memory_app\\\\my-frontend\\\\src\\\\pages\\\\InsightsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport KeywordAnalysis from '../components/KeywordAnalysis';\nimport SentimentAnalysis from '../components/SentimentAnalysis';\nimport EntryTimelineWithHeatmaps from '../components/EntryTimeline';\nimport axios from 'axios';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport { useUser } from '../UserContext';\nimport '../styles/Insights.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Insights = () => {\n  _s();\n  const {\n    user\n  } = useUser();\n  const [entries, setEntries] = useState([]);\n  const [keywords, setKeywords] = useState([]);\n  const [mediaAnalysis, setMediaAnalysis] = useState([]);\n  const [summary, setSummary] = useState('');\n  const [mentalHealthTips, setMentalHealthTips] = useState('');\n  const [isStrategyVisible, setIsStrategyVisible] = useState(false);\n  const API_URL = 'http://localhost:3001';\n  const defaultEntries = [{\n    text: \"Had a fantastic day at work! Got a promotion, feeling on top of the world. Excited for the future!\",\n    metadata: {\n      keywords: ['work', 'promotion', 'excited', 'future']\n    },\n    mediaAnalysis: {\n      labels: ['Positive'],\n      texts: ['Excited']\n    }\n  }, {\n    text: \"It's been a tough week. Struggling with personal issues, feeling a bit lost and overwhelmed.\",\n    metadata: {\n      keywords: ['tough', 'personal', 'struggling', 'overwhelmed']\n    },\n    mediaAnalysis: {\n      labels: ['Negative'],\n      texts: ['Stressed']\n    }\n  }, {\n    text: \"Work was okay today. Not much happened, just the usual. Nothing too exciting or frustrating.\",\n    metadata: {\n      keywords: ['work', 'usual', 'okay', 'average']\n    },\n    mediaAnalysis: {\n      labels: ['Neutral'],\n      texts: ['Indifferent']\n    }\n  }];\n  useEffect(() => {\n    if (user) {\n      const fetchEntries = async () => {\n        try {\n          const response = await fetch(`${API_URL}/journal-entries/${user.username}`);\n          if (response.ok) {\n            const data = await response.json();\n            setEntries(data);\n            aggregateData(data);\n          }\n        } catch (error) {\n          console.error('Error fetching journal entries:', error);\n        }\n      };\n      fetchEntries();\n    } else {\n      setEntries(defaultEntries);\n      aggregateData(defaultEntries);\n    }\n  }, [user]);\n  const aggregateData = data => {\n    const allKeywords = data.flatMap(entry => entry.metadata.keywords);\n    setKeywords(allKeywords);\n\n    // Safely extract media analysis labels\n    const sentiments = data.flatMap(entry => {\n      const mediaAnalysis = entry.mediaAnalysis || {}; // Ensure mediaAnalysis exists\n      return mediaAnalysis.labels || []; // If labels are missing, return an empty array\n    });\n    const positiveCount = sentiments.filter(label => label === 'Positive').length;\n    const negativeCount = sentiments.filter(label => label === 'Negative').length;\n    const neutralCount = sentiments.filter(label => label === 'Neutral').length;\n    let sentimentSummary = 'Mixed emotions were observed.';\n    if (positiveCount > negativeCount && positiveCount > neutralCount) {\n      sentimentSummary = 'Most entries indicate positive emotions.';\n    } else if (negativeCount > positiveCount && negativeCount > neutralCount) {\n      sentimentSummary = 'Many entries indicate negative emotions.';\n    } else if (neutralCount > positiveCount && neutralCount > negativeCount) {\n      sentimentSummary = 'The entries are mostly neutral.';\n    }\n    setSummary(sentimentSummary);\n\n    // Pass both keywords and sentimentSummary to generateMentalHealthTips\n    generateMentalHealthTips(allKeywords, sentimentSummary);\n  };\n  const generateMentalHealthTips = async (keywords, sentimentSummary) => {\n    // Ensure keywords are an array, even if they are joined into a string\n    const keywordArray = Array.isArray(keywords) ? keywords : keywords.split(', ');\n\n    // Create a focus summary from the most frequent keywords\n    const keywordFocus = keywordArray.join(', '); // Use the array for joining\n\n    // Fetch personalized recommendations from OpenAI (or your backend system)\n    try {\n      const response = await axios.post(`${API_URL}/api/mental-health-tips`, {\n        keywords: keywordArray,\n        // Send the array instead of a string\n        sentimentSummary: sentimentSummary // Send sentimentSummary as well\n      });\n      const recommendation = response.data.strategy;\n      setMentalHealthTips({\n        focus: keywordFocus,\n        recommendation: recommendation\n      });\n    } catch (error) {\n      console.error('Error fetching mental health tips:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"insights-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"insights-title\",\n      children: \"Insights\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), !user && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Your data will look something like this:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Sign in to see personalized insights based on your entries.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this), mentalHealthTips && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your mental health insights:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your journal entries tend to be focused on \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: mentalHealthTips.focus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 56\n        }, this), \". Some recommendations to support your mental health based on your tendencies are:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: mentalHealthTips.recommendation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: /*#__PURE__*/_jsxDEV(KeywordAnalysis, {\n        keywords: keywords\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: /*#__PURE__*/_jsxDEV(SentimentAnalysis, {\n        entries: entries\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: /*#__PURE__*/_jsxDEV(EntryTimelineWithHeatmaps, {\n        entries: entries\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(Insights, \"hNnFZNcupNq9CBc7FFJlXUO8GwY=\", false, function () {\n  return [useUser];\n});\n_c = Insights;\nexport default Insights;\nvar _c;\n$RefreshReg$(_c, \"Insights\");","map":{"version":3,"names":["React","useEffect","useState","KeywordAnalysis","SentimentAnalysis","EntryTimelineWithHeatmaps","axios","useUser","jsxDEV","_jsxDEV","Insights","_s","user","entries","setEntries","keywords","setKeywords","mediaAnalysis","setMediaAnalysis","summary","setSummary","mentalHealthTips","setMentalHealthTips","isStrategyVisible","setIsStrategyVisible","API_URL","defaultEntries","text","metadata","labels","texts","fetchEntries","response","fetch","username","ok","data","json","aggregateData","error","console","allKeywords","flatMap","entry","sentiments","positiveCount","filter","label","length","negativeCount","neutralCount","sentimentSummary","generateMentalHealthTips","keywordArray","Array","isArray","split","keywordFocus","join","post","recommendation","strategy","focus","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/brads/memory_app/my-frontend/src/pages/InsightsPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport KeywordAnalysis from '../components/KeywordAnalysis';\r\nimport SentimentAnalysis from '../components/SentimentAnalysis';\r\nimport EntryTimelineWithHeatmaps from '../components/EntryTimeline';\r\nimport axios from 'axios';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\n\r\nimport { useUser } from '../UserContext';\r\nimport '../styles/Insights.css';\r\n\r\nconst Insights = () => {\r\n  const { user } = useUser();\r\n  const [entries, setEntries] = useState([]);\r\n  const [keywords, setKeywords] = useState([]);\r\n  const [mediaAnalysis, setMediaAnalysis] = useState([]);\r\n  const [summary, setSummary] = useState('');\r\n  const [mentalHealthTips, setMentalHealthTips] = useState('');\r\n  const [isStrategyVisible, setIsStrategyVisible] = useState(false);\r\n\r\n  const API_URL = 'http://localhost:3001';\r\n\r\n  const defaultEntries = [\r\n    {\r\n      text: \"Had a fantastic day at work! Got a promotion, feeling on top of the world. Excited for the future!\",\r\n      metadata: { keywords: ['work', 'promotion', 'excited', 'future'] },\r\n      mediaAnalysis: { labels: ['Positive'], texts: ['Excited'] },\r\n    },\r\n    {\r\n      text: \"It's been a tough week. Struggling with personal issues, feeling a bit lost and overwhelmed.\",\r\n      metadata: { keywords: ['tough', 'personal', 'struggling', 'overwhelmed'] },\r\n      mediaAnalysis: { labels: ['Negative'], texts: ['Stressed'] },\r\n    },\r\n    {\r\n      text: \"Work was okay today. Not much happened, just the usual. Nothing too exciting or frustrating.\",\r\n      metadata: { keywords: ['work', 'usual', 'okay', 'average'] },\r\n      mediaAnalysis: { labels: ['Neutral'], texts: ['Indifferent'] },\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      const fetchEntries = async () => {\r\n        try {\r\n          const response = await fetch(`${API_URL}/journal-entries/${user.username}`);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setEntries(data);\r\n            aggregateData(data);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching journal entries:', error);\r\n        }\r\n      };\r\n\r\n      fetchEntries();\r\n    } else {\r\n      setEntries(defaultEntries);\r\n      aggregateData(defaultEntries);\r\n    }\r\n  }, [user]);\r\n\r\n  const aggregateData = (data) => {\r\n    const allKeywords = data.flatMap((entry) => entry.metadata.keywords);\r\n    setKeywords(allKeywords);\r\n\r\n    // Safely extract media analysis labels\r\n    const sentiments = data.flatMap((entry) => {\r\n      const mediaAnalysis = entry.mediaAnalysis || {}; // Ensure mediaAnalysis exists\r\n      return mediaAnalysis.labels || []; // If labels are missing, return an empty array\r\n    });\r\n\r\n    const positiveCount = sentiments.filter((label) => label === 'Positive').length;\r\n    const negativeCount = sentiments.filter((label) => label === 'Negative').length;\r\n    const neutralCount = sentiments.filter((label) => label === 'Neutral').length;\r\n\r\n    let sentimentSummary = 'Mixed emotions were observed.';\r\n    if (positiveCount > negativeCount && positiveCount > neutralCount) {\r\n      sentimentSummary = 'Most entries indicate positive emotions.';\r\n    } else if (negativeCount > positiveCount && negativeCount > neutralCount) {\r\n      sentimentSummary = 'Many entries indicate negative emotions.';\r\n    } else if (neutralCount > positiveCount && neutralCount > negativeCount) {\r\n      sentimentSummary = 'The entries are mostly neutral.';\r\n    }\r\n\r\n    setSummary(sentimentSummary);\r\n\r\n    // Pass both keywords and sentimentSummary to generateMentalHealthTips\r\n    generateMentalHealthTips(allKeywords, sentimentSummary);\r\n  };\r\n\r\n  const generateMentalHealthTips = async (keywords, sentimentSummary) => {\r\n    // Ensure keywords are an array, even if they are joined into a string\r\n    const keywordArray = Array.isArray(keywords) ? keywords : keywords.split(', ');\r\n  \r\n    // Create a focus summary from the most frequent keywords\r\n    const keywordFocus = keywordArray.join(', '); // Use the array for joining\r\n  \r\n    // Fetch personalized recommendations from OpenAI (or your backend system)\r\n    try {\r\n      const response = await axios.post(`${API_URL}/api/mental-health-tips`, {\r\n        keywords: keywordArray, // Send the array instead of a string\r\n        sentimentSummary: sentimentSummary, // Send sentimentSummary as well\r\n      });\r\n      const recommendation = response.data.strategy;\r\n  \r\n      setMentalHealthTips({\r\n        focus: keywordFocus,\r\n        recommendation: recommendation,\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching mental health tips:', error);\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"insights-container\">\r\n      <h1 className=\"insights-title\">Insights</h1>\r\n\r\n      {!user && (\r\n        <div className=\"card-container\">\r\n          <h4>Your data will look something like this:</h4>\r\n          <p>Sign in to see personalized insights based on your entries.</p>\r\n        </div>\r\n      )}\r\n\r\n      {mentalHealthTips && (\r\n        <div className=\"card-container\">\r\n          <h2>Your mental health insights:</h2>\r\n          <p>\r\n            Your journal entries tend to be focused on <strong>{mentalHealthTips.focus}</strong>.\r\n            Some recommendations to support your mental health based on your tendencies are:\r\n          </p>\r\n          <p><strong>{mentalHealthTips.recommendation}</strong></p>\r\n        </div>\r\n      )}\r\n\r\n      {/* Keyword Analysis */}\r\n      <div className=\"card-container\">\r\n        <KeywordAnalysis keywords={keywords} />\r\n      </div>\r\n\r\n      {/* Sentiment Analysis */}\r\n      <div className=\"card-container\">\r\n        <SentimentAnalysis entries={entries} />\r\n      </div>\r\n\r\n      {/* Timeline Analysis */}\r\n      <div className=\"card-container\">\r\n        <EntryTimelineWithHeatmaps entries={entries} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Insights;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}