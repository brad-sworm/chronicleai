{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brads\\\\memory_app\\\\my-frontend\\\\src\\\\pages\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react'; // Add missing imports for useState and useEffect\nimport { useUser } from '../UserContext'; // Import useUser from your UserContext file\nimport JournalEntryTable from '../components/JournalEntryTable'; // Import JournalEntryTable\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  console.log('Dashboard component rendering');\n  const {\n    user\n  } = useUser(); // Get user data from UserContext\n  console.log('User data:', user); // Ensure the full user object is logged\n\n  const [journalEntries, setJournalEntries] = useState([]);\n  useEffect(() => {\n    const fetchJournalEntries = async () => {\n      if (user && user.username) {\n        try {\n          // Fetch journal entries based on the 'username'\n          const response = await fetch(`http://localhost:3001/journal-entries/${user.username}`);\n          if (!response.ok) {\n            throw new Error('Failed to fetch journal entries');\n          }\n          const data = await response.json();\n          console.log('Journal Entries from Backend:', data);\n          setJournalEntries(data);\n        } catch (error) {\n          console.error(error.message);\n        }\n      }\n    };\n    fetchJournalEntries();\n  }, [user]); // Add 'user' as a dependency to ensure the effect re-runs when 'user' changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Welcome, \", user === null || user === void 0 ? void 0 : user.username]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(JournalEntryTable, {\n      journalEntries: journalEntries\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"X7DFqMyxfJ8iS4xC8SmBBsjEeUQ=\", false, function () {\n  return [useUser];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","useUser","JournalEntryTable","jsxDEV","_jsxDEV","Dashboard","_s","console","log","user","journalEntries","setJournalEntries","fetchJournalEntries","username","response","fetch","ok","Error","data","json","error","message","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/brads/memory_app/my-frontend/src/pages/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'; // Add missing imports for useState and useEffect\r\nimport { useUser } from '../UserContext'; // Import useUser from your UserContext file\r\nimport JournalEntryTable from '../components/JournalEntryTable'; // Import JournalEntryTable\r\n\r\nconst Dashboard = () => {\r\n  console.log('Dashboard component rendering');\r\n  const { user } = useUser(); // Get user data from UserContext\r\n  console.log('User data:', user); // Ensure the full user object is logged\r\n\r\n  const [journalEntries, setJournalEntries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchJournalEntries = async () => {\r\n      if (user && user.username) {\r\n        try {\r\n          // Fetch journal entries based on the 'username'\r\n          const response = await fetch(`http://localhost:3001/journal-entries/${user.username}`);\r\n          if (!response.ok) {\r\n            throw new Error('Failed to fetch journal entries');\r\n          }\r\n          const data = await response.json();\r\n          console.log('Journal Entries from Backend:', data);\r\n          setJournalEntries(data);\r\n        } catch (error) {\r\n          console.error(error.message);\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchJournalEntries();\r\n  }, [user]); // Add 'user' as a dependency to ensure the effect re-runs when 'user' changes\r\n\r\n  return (\r\n    <div>\r\n      <h1>Welcome, {user?.username}</h1>\r\n      \r\n      <JournalEntryTable journalEntries={journalEntries} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO,CAAC,CAAC;AACpD,SAASC,OAAO,QAAQ,gBAAgB,CAAC,CAAC;AAC1C,OAAOC,iBAAiB,MAAM,iCAAiC,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEjE,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtBC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;EAC5C,MAAM;IAAEC;EAAK,CAAC,GAAGR,OAAO,CAAC,CAAC,CAAC,CAAC;EAC5BM,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEC,IAAI,CAAC,CAAC,CAAC;;EAEjC,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAExDC,SAAS,CAAC,MAAM;IACd,MAAMY,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC,IAAIH,IAAI,IAAIA,IAAI,CAACI,QAAQ,EAAE;QACzB,IAAI;UACF;UACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyCN,IAAI,CAACI,QAAQ,EAAE,CAAC;UACtF,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;YAChB,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;UACpD;UACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;UAClCZ,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEU,IAAI,CAAC;UAClDP,iBAAiB,CAACO,IAAI,CAAC;QACzB,CAAC,CAAC,OAAOE,KAAK,EAAE;UACdb,OAAO,CAACa,KAAK,CAACA,KAAK,CAACC,OAAO,CAAC;QAC9B;MACF;IACF,CAAC;IAEDT,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,CAACH,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEZ,oBACEL,OAAA;IAAAkB,QAAA,gBACElB,OAAA;MAAAkB,QAAA,GAAI,WAAS,EAACb,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEI,QAAQ;IAAA;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAElCtB,OAAA,CAACF,iBAAiB;MAACQ,cAAc,EAAEA;IAAe;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClD,CAAC;AAEV,CAAC;AAACpB,EAAA,CAnCID,SAAS;EAAA,QAEIJ,OAAO;AAAA;AAAA0B,EAAA,GAFpBtB,SAAS;AAqCf,eAAeA,SAAS;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}