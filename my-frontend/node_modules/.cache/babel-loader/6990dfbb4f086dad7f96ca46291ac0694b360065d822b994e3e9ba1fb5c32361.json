{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brads\\\\memory_app\\\\my-frontend\\\\src\\\\components\\\\JournalEntry.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MediaUpload from './MediaUpload';\nimport SpeechToText from './SpeechToText';\nimport { useUser } from '../UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JournalEntry = () => {\n  _s();\n  const {\n    user\n  } = useUser();\n  const [text, setText] = useState('');\n  const [metadata, setMetadata] = useState({\n    startTime: null,\n    endTime: null,\n    duration: null,\n    date: '',\n    keywords: [],\n    names: []\n  });\n  const [selectedMedia, setSelectedMedia] = useState([]);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    if (!metadata.date) {\n      const currentDate = new Date().toISOString().split('T')[0]; // YYYY-MM-DD format\n      setMetadata(prevMetadata => ({\n        ...prevMetadata,\n        date: currentDate\n      }));\n    }\n  }, []);\n  const handleSpeechToText = transcribedText => {\n    setText(transcribedText);\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const currentTime = new Date();\n    const updatedMetadata = {\n      ...metadata,\n      startTime: metadata.startTime || currentTime.toISOString(),\n      endTime: metadata.endTime || currentTime.toISOString(),\n      keywords: metadata.keywords.length > 0 ? metadata.keywords : ['default'],\n      names: metadata.names.length > 0 ? metadata.names : ['default']\n    };\n    const journalEntryData = {\n      text: text || 'No text provided',\n      metadata: JSON.stringify(updatedMetadata),\n      user: 'brad123' // Ensure user info is included\n    };\n    console.log('Sending data to server:', journalEntryData); // Log the data\n\n    try {\n      const response = await fetch('http://localhost:3001/journal-entries', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(journalEntryData)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      console.log('Response from server:', result);\n    } catch (error) {\n      console.error('Error submitting journal entry:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create Journal Entry\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SpeechToText, {\n      onTranscription: handleSpeechToText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: text,\n      onChange: e => setText(e.target.value),\n      placeholder: \"Type your journal entry here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MediaUpload, {\n      onMediaSelect: setSelectedMedia\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      disabled: isSubmitting,\n      children: isSubmitting ? 'Submitting...' : 'Submit'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(JournalEntry, \"mI0JAiaGv6YY9j5XyyOyGil3pCE=\", false, function () {\n  return [useUser];\n});\n_c = JournalEntry;\nexport default JournalEntry;\nvar _c;\n$RefreshReg$(_c, \"JournalEntry\");","map":{"version":3,"names":["React","useState","useEffect","MediaUpload","SpeechToText","useUser","jsxDEV","_jsxDEV","JournalEntry","_s","user","text","setText","metadata","setMetadata","startTime","endTime","duration","date","keywords","names","selectedMedia","setSelectedMedia","isSubmitting","setIsSubmitting","message","setMessage","currentDate","Date","toISOString","split","prevMetadata","handleSpeechToText","transcribedText","handleSubmit","event","preventDefault","currentTime","updatedMetadata","length","journalEntryData","JSON","stringify","console","log","response","fetch","method","headers","body","ok","Error","status","result","json","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onTranscription","value","onChange","e","target","placeholder","onMediaSelect","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/brads/memory_app/my-frontend/src/components/JournalEntry.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport MediaUpload from './MediaUpload';\r\nimport SpeechToText from './SpeechToText';\r\nimport { useUser } from '../UserContext';\r\n\r\nconst JournalEntry = () => {\r\n  const { user } = useUser();\r\n  const [text, setText] = useState('');\r\n  const [metadata, setMetadata] = useState({\r\n    startTime: null,\r\n    endTime: null,\r\n    duration: null,\r\n    date: '',\r\n    keywords: [],\r\n    names: [],\r\n  });\r\n  const [selectedMedia, setSelectedMedia] = useState([]);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (!metadata.date) {\r\n      const currentDate = new Date().toISOString().split('T')[0]; // YYYY-MM-DD format\r\n      setMetadata((prevMetadata) => ({\r\n        ...prevMetadata,\r\n        date: currentDate,\r\n      }));\r\n    }\r\n  }, []);\r\n\r\n  const handleSpeechToText = (transcribedText) => {\r\n    setText(transcribedText);\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n  \r\n    const currentTime = new Date();\r\n  \r\n    const updatedMetadata = {\r\n      ...metadata,\r\n      startTime: metadata.startTime || currentTime.toISOString(),\r\n      endTime: metadata.endTime || currentTime.toISOString(),\r\n      keywords: metadata.keywords.length > 0 ? metadata.keywords : ['default'],\r\n      names: metadata.names.length > 0 ? metadata.names : ['default'],\r\n    };\r\n  \r\n    const journalEntryData = {\r\n      text: text || 'No text provided',\r\n      metadata: JSON.stringify(updatedMetadata),\r\n      user: 'brad123', // Ensure user info is included\r\n    };\r\n  \r\n    console.log('Sending data to server:', journalEntryData); // Log the data\r\n  \r\n    try {\r\n      const response = await fetch('http://localhost:3001/journal-entries', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(journalEntryData),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n  \r\n      const result = await response.json();\r\n      console.log('Response from server:', result);\r\n    } catch (error) {\r\n      console.error('Error submitting journal entry:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Create Journal Entry</h2>\r\n      <SpeechToText onTranscription={handleSpeechToText} />\r\n      <textarea\r\n        value={text}\r\n        onChange={(e) => setText(e.target.value)}\r\n        placeholder=\"Type your journal entry here\"\r\n      />\r\n      <MediaUpload onMediaSelect={setSelectedMedia} />\r\n      <button onClick={handleSubmit} disabled={isSubmitting}>\r\n        {isSubmitting ? 'Submitting...' : 'Submit'}\r\n      </button>\r\n      {message && <p>{message}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JournalEntry;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,SAASC,OAAO,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM;IAAEC;EAAK,CAAC,GAAGL,OAAO,CAAC,CAAC;EAC1B,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC;IACvCc,SAAS,EAAE,IAAI;IACfC,OAAO,EAAE,IAAI;IACbC,QAAQ,EAAE,IAAI;IACdC,IAAI,EAAE,EAAE;IACRC,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE;EACT,CAAC,CAAC;EACF,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACsB,YAAY,EAAEC,eAAe,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACwB,OAAO,EAAEC,UAAU,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACd,IAAI,CAACW,QAAQ,CAACK,IAAI,EAAE;MAClB,MAAMS,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC5DhB,WAAW,CAAEiB,YAAY,KAAM;QAC7B,GAAGA,YAAY;QACfb,IAAI,EAAES;MACR,CAAC,CAAC,CAAC;IACL;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,kBAAkB,GAAIC,eAAe,IAAK;IAC9CrB,OAAO,CAACqB,eAAe,CAAC;EAC1B,CAAC;EAED,MAAMC,YAAY,GAAG,MAAOC,KAAK,IAAK;IACpCA,KAAK,CAACC,cAAc,CAAC,CAAC;IAEtB,MAAMC,WAAW,GAAG,IAAIT,IAAI,CAAC,CAAC;IAE9B,MAAMU,eAAe,GAAG;MACtB,GAAGzB,QAAQ;MACXE,SAAS,EAAEF,QAAQ,CAACE,SAAS,IAAIsB,WAAW,CAACR,WAAW,CAAC,CAAC;MAC1Db,OAAO,EAAEH,QAAQ,CAACG,OAAO,IAAIqB,WAAW,CAACR,WAAW,CAAC,CAAC;MACtDV,QAAQ,EAAEN,QAAQ,CAACM,QAAQ,CAACoB,MAAM,GAAG,CAAC,GAAG1B,QAAQ,CAACM,QAAQ,GAAG,CAAC,SAAS,CAAC;MACxEC,KAAK,EAAEP,QAAQ,CAACO,KAAK,CAACmB,MAAM,GAAG,CAAC,GAAG1B,QAAQ,CAACO,KAAK,GAAG,CAAC,SAAS;IAChE,CAAC;IAED,MAAMoB,gBAAgB,GAAG;MACvB7B,IAAI,EAAEA,IAAI,IAAI,kBAAkB;MAChCE,QAAQ,EAAE4B,IAAI,CAACC,SAAS,CAACJ,eAAe,CAAC;MACzC5B,IAAI,EAAE,SAAS,CAAE;IACnB,CAAC;IAEDiC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEJ,gBAAgB,CAAC,CAAC,CAAC;;IAE1D,IAAI;MACF,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;QACpEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAER,IAAI,CAACC,SAAS,CAACF,gBAAgB;MACvC,CAAC,CAAC;MAEF,IAAI,CAACK,QAAQ,CAACK,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBN,QAAQ,CAACO,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,MAAM,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACpCX,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAES,MAAM,CAAC;IAC9C,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdZ,OAAO,CAACY,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACzD;EACF,CAAC;EAED,oBACEhD,OAAA;IAAAiD,QAAA,gBACEjD,OAAA;MAAAiD,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7BrD,OAAA,CAACH,YAAY;MAACyD,eAAe,EAAE7B;IAAmB;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrDrD,OAAA;MACEuD,KAAK,EAAEnD,IAAK;MACZoD,QAAQ,EAAGC,CAAC,IAAKpD,OAAO,CAACoD,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MACzCI,WAAW,EAAC;IAA8B;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC,eACFrD,OAAA,CAACJ,WAAW;MAACgE,aAAa,EAAE7C;IAAiB;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChDrD,OAAA;MAAQ6D,OAAO,EAAElC,YAAa;MAACmC,QAAQ,EAAE9C,YAAa;MAAAiC,QAAA,EACnDjC,YAAY,GAAG,eAAe,GAAG;IAAQ;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CAAC,EACRnC,OAAO,iBAAIlB,OAAA;MAAAiD,QAAA,EAAI/B;IAAO;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzB,CAAC;AAEV,CAAC;AAACnD,EAAA,CAtFID,YAAY;EAAA,QACCH,OAAO;AAAA;AAAAiE,EAAA,GADpB9D,YAAY;AAwFlB,eAAeA,YAAY;AAAC,IAAA8D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}