{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brads\\\\memory_app\\\\my-frontend\\\\src\\\\components\\\\SpeechToText.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport debounce from 'lodash.debounce';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpeechToText = ({\n  onTextChange\n}) => {\n  _s();\n  const [text, setText] = useState('');\n  const [isListening, setIsListening] = useState(false);\n  const [metadata, setMetadata] = useState({\n    startTime: null,\n    endTime: null,\n    duration: null,\n    date: null,\n    keywords: [],\n    names: []\n  });\n  const recognitionRef = useRef(null);\n  const createRecognitionInstance = () => {\n    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n    recognition.continuous = true;\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n    recognition.onresult = event => {\n      const transcript = Array.from(event.results).map(result => result[0].transcript).join('');\n      setText(prevText => prevText + ' ' + transcript);\n    };\n    recognition.onerror = event => {\n      console.error('Speech recognition error:', event.error);\n      setIsListening(false);\n      recognition.stop();\n    };\n    recognition.onend = () => {\n      if (isListening) {\n        recognition.start();\n      }\n    };\n    recognitionRef.current = recognition;\n  };\n  const startListening = () => {\n    createRecognitionInstance();\n    setMetadata(prev => ({\n      ...prev,\n      startTime: prev.startTime || new Date(),\n      date: new Date()\n    }));\n    setIsListening(true);\n    recognitionRef.current.start();\n  };\n  const stopListening = () => {\n    if (recognitionRef.current) {\n      const endTime = new Date();\n      setMetadata(prev => ({\n        ...prev,\n        endTime,\n        duration: endTime - prev.startTime\n      }));\n      setIsListening(false);\n      recognitionRef.current.stop();\n    }\n  };\n  const handleTextChange = event => {\n    setText(event.target.value);\n    setMetadata(prev => ({\n      ...prev,\n      endTime: new Date()\n    }));\n  };\n  const debouncedOnTextChange = debounce((text, metadata) => {\n    onTextChange(text, metadata);\n  }, 300);\n  useEffect(() => {\n    debouncedOnTextChange(text, metadata);\n    return () => debouncedOnTextChange.cancel();\n  }, [text, metadata]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      marginTop: '50px'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Speech to Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: isListening ? stopListening : startListening,\n        children: isListening ? 'Stop Listening' : 'Start Listening'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: text,\n        rows: \"10\",\n        cols: \"50\",\n        onChange: handleTextChange,\n        placeholder: \"Enter text or use speech recognition...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(SpeechToText, \"pQPWjPG4jDsUr5O3e6/yqX7Xkbg=\");\n_c = SpeechToText;\nexport default SpeechToText;\nvar _c;\n$RefreshReg$(_c, \"SpeechToText\");","map":{"version":3,"names":["React","useState","useEffect","useRef","debounce","jsxDEV","_jsxDEV","SpeechToText","onTextChange","_s","text","setText","isListening","setIsListening","metadata","setMetadata","startTime","endTime","duration","date","keywords","names","recognitionRef","createRecognitionInstance","recognition","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","transcript","Array","from","results","map","result","join","prevText","onerror","console","error","stop","onend","start","current","startListening","prev","Date","stopListening","handleTextChange","target","value","debouncedOnTextChange","cancel","style","display","flexDirection","alignItems","marginTop","children","textAlign","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","onClick","rows","cols","onChange","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/brads/memory_app/my-frontend/src/components/SpeechToText.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport debounce from 'lodash.debounce';\r\n\r\nconst SpeechToText = ({ onTextChange }) => {\r\n  const [text, setText] = useState('');\r\n  const [isListening, setIsListening] = useState(false);\r\n  const [metadata, setMetadata] = useState({\r\n    startTime: null,\r\n    endTime: null,\r\n    duration: null,\r\n    date: null,\r\n    keywords: [],\r\n    names: [],\r\n  });\r\n\r\n  const recognitionRef = useRef(null);\r\n\r\n  const createRecognitionInstance = () => {\r\n    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\r\n    recognition.continuous = true;\r\n    recognition.interimResults = false;\r\n    recognition.lang = 'en-US';\r\n\r\n    recognition.onresult = (event) => {\r\n      const transcript = Array.from(event.results)\r\n        .map((result) => result[0].transcript)\r\n        .join('');\r\n      setText((prevText) => prevText + ' ' + transcript);\r\n    };\r\n\r\n    recognition.onerror = (event) => {\r\n      console.error('Speech recognition error:', event.error);\r\n      setIsListening(false);\r\n      recognition.stop();\r\n    };\r\n\r\n    recognition.onend = () => {\r\n      if (isListening) {\r\n        recognition.start();\r\n      }\r\n    };\r\n\r\n    recognitionRef.current = recognition;\r\n  };\r\n\r\n  const startListening = () => {\r\n    createRecognitionInstance();\r\n    setMetadata((prev) => ({\r\n      ...prev,\r\n      startTime: prev.startTime || new Date(),\r\n      date: new Date(),\r\n    }));\r\n    setIsListening(true);\r\n    recognitionRef.current.start();\r\n  };\r\n\r\n  const stopListening = () => {\r\n    if (recognitionRef.current) {\r\n      const endTime = new Date();\r\n      setMetadata((prev) => ({\r\n        ...prev,\r\n        endTime,\r\n        duration: endTime - prev.startTime,\r\n      }));\r\n      setIsListening(false);\r\n      recognitionRef.current.stop();\r\n    }\r\n  };\r\n\r\n  const handleTextChange = (event) => {\r\n    setText(event.target.value);\r\n    setMetadata((prev) => ({\r\n      ...prev,\r\n      endTime: new Date(),\r\n    }));\r\n  };\r\n\r\n  const debouncedOnTextChange = debounce((text, metadata) => {\r\n    onTextChange(text, metadata);\r\n  }, 300);\r\n\r\n  useEffect(() => {\r\n    debouncedOnTextChange(text, metadata);\r\n    return () => debouncedOnTextChange.cancel();\r\n  }, [text, metadata]);\r\n\r\n  return (\r\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '50px' }}>\r\n      <div style={{ textAlign: 'center', marginBottom: '20px' }}>\r\n        <h1>Speech to Text</h1>\r\n        <button onClick={isListening ? stopListening : startListening}>\r\n          {isListening ? 'Stop Listening' : 'Start Listening'}\r\n        </button>\r\n        <textarea\r\n          value={text}\r\n          rows=\"10\"\r\n          cols=\"50\"\r\n          onChange={handleTextChange}\r\n          placeholder=\"Enter text or use speech recognition...\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpeechToText;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}