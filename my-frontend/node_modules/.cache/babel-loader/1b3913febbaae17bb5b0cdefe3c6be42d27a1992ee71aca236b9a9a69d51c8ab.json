{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brads\\\\memory_app\\\\my-frontend\\\\src\\\\components\\\\EntryTimeline.js\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Register the necessary Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst EntryTimelineWithHeatmaps = ({\n  entries\n}) => {\n  // Mock data\n  const mockEntries = [{\n    metadata: {\n      date: '2025-01-10T08:30:00Z'\n    },\n    text: 'Morning entry',\n    sentiment: 1\n  }, {\n    metadata: {\n      date: '2025-01-10T13:45:00Z'\n    },\n    text: 'Afternoon entry',\n    sentiment: -1\n  }, {\n    metadata: {\n      date: '2025-01-10T19:10:00Z'\n    },\n    text: 'Evening entry',\n    sentiment: 0\n  }, {\n    metadata: {\n      date: '2025-01-11T09:00:00Z'\n    },\n    text: 'Morning entry',\n    sentiment: 1\n  }, {\n    metadata: {\n      date: '2025-01-11T14:20:00Z'\n    },\n    text: 'Afternoon entry',\n    sentiment: -1\n  }, {\n    metadata: {\n      date: '2025-01-11T20:30:00Z'\n    },\n    text: 'Evening entry',\n    sentiment: 0\n  }, {\n    metadata: {\n      date: '2025-01-12T07:00:00Z'\n    },\n    text: 'Morning entry',\n    sentiment: 1\n  }, {\n    metadata: {\n      date: '2025-01-12T12:30:00Z'\n    },\n    text: 'Afternoon entry',\n    sentiment: -1\n  }, {\n    metadata: {\n      date: '2025-01-12T18:00:00Z'\n    },\n    text: 'Evening entry',\n    sentiment: 0\n  }, {\n    metadata: {\n      date: '2025-01-13T08:15:00Z'\n    },\n    text: 'Morning entry',\n    sentiment: 1\n  }, {\n    metadata: {\n      date: '2025-01-13T14:45:00Z'\n    },\n    text: 'Afternoon entry',\n    sentiment: -1\n  }, {\n    metadata: {\n      date: '2025-01-13T19:30:00Z'\n    },\n    text: 'Evening entry',\n    sentiment: 0\n  }];\n\n  // Sort entries by date\n  const sortedEntries = mockEntries.sort((a, b) => new Date(a.metadata.date) - new Date(b.metadata.date));\n\n  // Time blocks and sentiment categories\n  const timeBlocks = ['Morning', 'Afternoon', 'Evening'];\n  const dates = [...new Set(sortedEntries.map(entry => new Date(entry.metadata.date).toLocaleDateString()))];\n\n  // Create entry frequency data\n  const entryFrequencyData = timeBlocks.map(timeBlock => dates.map(date => sortedEntries.filter(entry => new Date(entry.metadata.date).toLocaleDateString() === date && categorizeTime(entry.metadata.date) === timeBlock).length));\n\n  // Create sentiment data\n  const sentimentData = timeBlocks.map(timeBlock => dates.map(date => sortedEntries.filter(entry => new Date(entry.metadata.date).toLocaleDateString() === date && categorizeTime(entry.metadata.date) === timeBlock).map(entry => entry.sentiment)));\n\n  // Categorize time of the day\n  const categorizeTime = date => {\n    const hour = new Date(date).getHours();\n    if (hour < 12) return 'Morning';\n    if (hour < 18) return 'Afternoon';\n    return 'Evening';\n  };\n\n  // Create chart data for entry frequency heatmap\n  const entryFrequencyChartData = {\n    labels: dates,\n    datasets: timeBlocks.map((timeBlock, index) => ({\n      label: timeBlock,\n      data: entryFrequencyData[index],\n      fill: true,\n      backgroundColor: `rgba(75, 192, 192, ${index / 3 + 0.2})`,\n      // Slight color variation\n      borderColor: `rgba(75, 192, 192, ${index / 3 + 0.8})`,\n      borderWidth: 1\n    }))\n  };\n\n  // Create chart data for sentiment heatmap\n  const sentimentChartData = {\n    labels: dates,\n    datasets: timeBlocks.map((timeBlock, index) => ({\n      label: timeBlock,\n      data: sentimentData[index].map(sentiments => sentiments.length ? Math.max(...sentiments) : 0 // Take the maximum sentiment for the time block\n      ),\n      fill: true,\n      backgroundColor: `rgba(255, 99, 132, ${index / 3 + 0.2})`,\n      borderColor: `rgba(255, 99, 132, ${index / 3 + 0.8})`,\n      borderWidth: 1\n    }))\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Entry Frequency Heatmap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: entryFrequencyChartData,\n      options: {\n        responsive: true,\n        plugins: {\n          legend: {\n            position: 'top'\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Sentiment Heatmap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: sentimentChartData,\n      options: {\n        responsive: true,\n        plugins: {\n          legend: {\n            position: 'top'\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_c = EntryTimelineWithHeatmaps;\nexport default EntryTimelineWithHeatmaps;\nvar _c;\n$RefreshReg$(_c, \"EntryTimelineWithHeatmaps\");","map":{"version":3,"names":["React","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","EntryTimelineWithHeatmaps","entries","mockEntries","metadata","date","text","sentiment","sortedEntries","sort","a","b","Date","timeBlocks","dates","Set","map","entry","toLocaleDateString","entryFrequencyData","timeBlock","filter","categorizeTime","length","sentimentData","hour","getHours","entryFrequencyChartData","labels","datasets","index","label","data","fill","backgroundColor","borderColor","borderWidth","sentimentChartData","sentiments","Math","max","children","fileName","_jsxFileName","lineNumber","columnNumber","options","responsive","plugins","legend","position","_c","$RefreshReg$"],"sources":["C:/Users/brads/memory_app/my-frontend/src/components/EntryTimeline.js"],"sourcesContent":["import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\r\n\r\n// Register the necessary Chart.js components\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst EntryTimelineWithHeatmaps = ({ entries }) => {\r\n  // Mock data\r\n  const mockEntries = [\r\n    { metadata: { date: '2025-01-10T08:30:00Z' }, text: 'Morning entry', sentiment: 1 },\r\n    { metadata: { date: '2025-01-10T13:45:00Z' }, text: 'Afternoon entry', sentiment: -1 },\r\n    { metadata: { date: '2025-01-10T19:10:00Z' }, text: 'Evening entry', sentiment: 0 },\r\n    { metadata: { date: '2025-01-11T09:00:00Z' }, text: 'Morning entry', sentiment: 1 },\r\n    { metadata: { date: '2025-01-11T14:20:00Z' }, text: 'Afternoon entry', sentiment: -1 },\r\n    { metadata: { date: '2025-01-11T20:30:00Z' }, text: 'Evening entry', sentiment: 0 },\r\n    { metadata: { date: '2025-01-12T07:00:00Z' }, text: 'Morning entry', sentiment: 1 },\r\n    { metadata: { date: '2025-01-12T12:30:00Z' }, text: 'Afternoon entry', sentiment: -1 },\r\n    { metadata: { date: '2025-01-12T18:00:00Z' }, text: 'Evening entry', sentiment: 0 },\r\n    { metadata: { date: '2025-01-13T08:15:00Z' }, text: 'Morning entry', sentiment: 1 },\r\n    { metadata: { date: '2025-01-13T14:45:00Z' }, text: 'Afternoon entry', sentiment: -1 },\r\n    { metadata: { date: '2025-01-13T19:30:00Z' }, text: 'Evening entry', sentiment: 0 },\r\n  ];\r\n\r\n  // Sort entries by date\r\n  const sortedEntries = mockEntries.sort((a, b) => new Date(a.metadata.date) - new Date(b.metadata.date));\r\n\r\n  // Time blocks and sentiment categories\r\n  const timeBlocks = ['Morning', 'Afternoon', 'Evening'];\r\n  const dates = [...new Set(sortedEntries.map(entry => new Date(entry.metadata.date).toLocaleDateString()))];\r\n\r\n  // Create entry frequency data\r\n  const entryFrequencyData = timeBlocks.map((timeBlock) =>\r\n    dates.map((date) =>\r\n      sortedEntries.filter(\r\n        (entry) =>\r\n          new Date(entry.metadata.date).toLocaleDateString() === date &&\r\n          categorizeTime(entry.metadata.date) === timeBlock\r\n      ).length\r\n    )\r\n  );\r\n\r\n  // Create sentiment data\r\n  const sentimentData = timeBlocks.map((timeBlock) =>\r\n    dates.map((date) =>\r\n      sortedEntries\r\n        .filter(\r\n          (entry) =>\r\n            new Date(entry.metadata.date).toLocaleDateString() === date &&\r\n            categorizeTime(entry.metadata.date) === timeBlock\r\n        )\r\n        .map((entry) => entry.sentiment)\r\n    )\r\n  );\r\n\r\n  // Categorize time of the day\r\n  const categorizeTime = (date) => {\r\n    const hour = new Date(date).getHours();\r\n    if (hour < 12) return 'Morning';\r\n    if (hour < 18) return 'Afternoon';\r\n    return 'Evening';\r\n  };\r\n\r\n  // Create chart data for entry frequency heatmap\r\n  const entryFrequencyChartData = {\r\n    labels: dates,\r\n    datasets: timeBlocks.map((timeBlock, index) => ({\r\n      label: timeBlock,\r\n      data: entryFrequencyData[index],\r\n      fill: true,\r\n      backgroundColor: `rgba(75, 192, 192, ${index / 3 + 0.2})`, // Slight color variation\r\n      borderColor: `rgba(75, 192, 192, ${index / 3 + 0.8})`,\r\n      borderWidth: 1,\r\n    })),\r\n  };\r\n\r\n  // Create chart data for sentiment heatmap\r\n  const sentimentChartData = {\r\n    labels: dates,\r\n    datasets: timeBlocks.map((timeBlock, index) => ({\r\n      label: timeBlock,\r\n      data: sentimentData[index].map((sentiments) =>\r\n        sentiments.length ? Math.max(...sentiments) : 0 // Take the maximum sentiment for the time block\r\n      ),\r\n      fill: true,\r\n      backgroundColor: `rgba(255, 99, 132, ${index / 3 + 0.2})`,\r\n      borderColor: `rgba(255, 99, 132, ${index / 3 + 0.8})`,\r\n      borderWidth: 1,\r\n    })),\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Entry Frequency Heatmap</h3>\r\n      <Line data={entryFrequencyChartData} options={{ responsive: true, plugins: { legend: { position: 'top' } } }} />\r\n      <h3>Sentiment Heatmap</h3>\r\n      <Line data={sentimentChartData} options={{ responsive: true, plugins: { legend: { position: 'top' } } }} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EntryTimelineWithHeatmaps;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}