{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brads\\\\memory_app\\\\my-frontend\\\\src\\\\components\\\\JournalEntry.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport SpeechToText from './SpeechToText';\nimport MediaUpload from './MediaUpload';\nimport CombinedAnalysis from './CombinedAnalysis';\nimport MetadataDisplay from './MetadataDisplay';\nimport { useUser } from '../UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JournalEntry = () => {\n  _s();\n  const {\n    user\n  } = useUser();\n  const [metadata, setMetadata] = useState({\n    startTime: null,\n    endTime: null,\n    duration: null,\n    date: '',\n    keywords: [],\n    names: [],\n    text: ''\n  });\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [mediaAnalysisResults, setMediaAnalysisResults] = useState({\n    labels: [],\n    texts: []\n  });\n  const handleMetadataChange = updatedMetadata => {\n    console.log('Metadata received from SpeechToText:', updatedMetadata);\n    const formattedMetadata = {\n      ...updatedMetadata,\n      date: updatedMetadata.date ? new Date(updatedMetadata.date).toISOString().split('T')[0] : ''\n    };\n    setMetadata(formattedMetadata);\n  };\n  const handleMediaSelect = files => {\n    console.log('Selected files:', files);\n    setSelectedFiles(files);\n    files.forEach(uploadAndAnalyzeMedia);\n  };\n  const handleMediaAnalysisResults = results => {\n    console.log('Media analysis results:', results);\n    setMediaAnalysisResults(results);\n  };\n  const uploadAndAnalyzeMedia = async file => {\n    const formData = new FormData();\n    formData.append('media', file);\n    try {\n      const response = await fetch('http://localhost:3001/media/analyze-video', {\n        method: 'POST',\n        body: formData\n      });\n      if (response.ok) {\n        const result = await response.json();\n        console.log('Analysis result:', result);\n        handleMediaAnalysisResults(result);\n      } else {\n        console.error('Failed to analyze media');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  const handleSubmit = async () => {\n    const combinedKeywords = [...new Set([...metadata.keywords, ...mediaAnalysisResults.labels])];\n    const combinedNames = [...new Set([...metadata.names, ...mediaAnalysisResults.texts])];\n    const formattedMetadata = {\n      ...metadata,\n      keywords: combinedKeywords,\n      names: combinedNames,\n      date: metadata.date ? new Date(metadata.date).toISOString().split('T')[0] : '',\n      startTime: metadata.startTime ? new Date(metadata.startTime).toISOString() : null,\n      endTime: metadata.endTime ? new Date(metadata.endTime).toISOString() : null\n    };\n    const formData = new FormData();\n    formData.append('user', user.username);\n    formData.append('text', metadata.text);\n    formData.append('metadata', JSON.stringify(formattedMetadata));\n    selectedFiles.forEach(file => {\n      formData.append('media', file);\n    });\n    try {\n      const response = await fetch('http://localhost:3001/journal-entries', {\n        method: 'POST',\n        body: formData\n      });\n      if (response.ok) {\n        console.log('Journal entry saved successfully');\n      } else {\n        console.error('Failed to save journal entry');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"journal-entry-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"journal-entry-section\",\n      children: /*#__PURE__*/_jsxDEV(SpeechToText, {\n        onMetadataChange: handleMetadataChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"journal-entry-section\",\n      children: /*#__PURE__*/_jsxDEV(MediaUpload, {\n        onMediaSelect: handleMediaSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"journal-entry-section\",\n      children: /*#__PURE__*/_jsxDEV(MetadataDisplay, {\n        metadata: metadata,\n        mediaAnalysis: mediaAnalysisResults,\n        onMetadataChange: handleMetadataChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"submit-section\",\n      style: {\n        textAlign: 'center',\n        marginTop: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(JournalEntry, \"xHf9G/SdtmKn7ORsOwwyAmGXOO8=\", false, function () {\n  return [useUser];\n});\n_c = JournalEntry;\nexport default JournalEntry;\nvar _c;\n$RefreshReg$(_c, \"JournalEntry\");","map":{"version":3,"names":["React","useState","SpeechToText","MediaUpload","CombinedAnalysis","MetadataDisplay","useUser","jsxDEV","_jsxDEV","JournalEntry","_s","user","metadata","setMetadata","startTime","endTime","duration","date","keywords","names","text","selectedFiles","setSelectedFiles","mediaAnalysisResults","setMediaAnalysisResults","labels","texts","handleMetadataChange","updatedMetadata","console","log","formattedMetadata","Date","toISOString","split","handleMediaSelect","files","forEach","uploadAndAnalyzeMedia","handleMediaAnalysisResults","results","file","formData","FormData","append","response","fetch","method","body","ok","result","json","error","handleSubmit","combinedKeywords","Set","combinedNames","username","JSON","stringify","className","children","onMetadataChange","fileName","_jsxFileName","lineNumber","columnNumber","onMediaSelect","mediaAnalysis","style","textAlign","marginTop","onClick","_c","$RefreshReg$"],"sources":["C:/Users/brads/memory_app/my-frontend/src/components/JournalEntry.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport SpeechToText from './SpeechToText';\r\nimport MediaUpload from './MediaUpload';\r\nimport CombinedAnalysis from './CombinedAnalysis';\r\nimport MetadataDisplay from './MetadataDisplay';\r\nimport { useUser } from '../UserContext';\r\n\r\nconst JournalEntry = () => {\r\n  const { user } = useUser();\r\n  const [metadata, setMetadata] = useState({\r\n    startTime: null,\r\n    endTime: null,\r\n    duration: null,\r\n    date: '',\r\n    keywords: [],\r\n    names: [],\r\n    text: '',\r\n  });\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n  const [mediaAnalysisResults, setMediaAnalysisResults] = useState({\r\n    labels: [],\r\n    texts: []\r\n  });\r\n\r\n  const handleMetadataChange = (updatedMetadata) => {\r\n    console.log('Metadata received from SpeechToText:', updatedMetadata);\r\n    const formattedMetadata = {\r\n      ...updatedMetadata,\r\n      date: updatedMetadata.date ? new Date(updatedMetadata.date).toISOString().split('T')[0] : '',\r\n    };\r\n    setMetadata(formattedMetadata);\r\n  };\r\n\r\n  const handleMediaSelect = (files) => {\r\n    console.log('Selected files:', files);\r\n    setSelectedFiles(files);\r\n    files.forEach(uploadAndAnalyzeMedia);\r\n  };\r\n\r\n  const handleMediaAnalysisResults = (results) => {\r\n    console.log('Media analysis results:', results);\r\n    setMediaAnalysisResults(results);\r\n  };\r\n\r\n  const uploadAndAnalyzeMedia = async (file) => {\r\n    const formData = new FormData();\r\n    formData.append('media', file);\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:3001/media/analyze-video', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log('Analysis result:', result);\r\n        handleMediaAnalysisResults(result);\r\n      } else {\r\n        console.error('Failed to analyze media');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    const combinedKeywords = [...new Set([...metadata.keywords, ...mediaAnalysisResults.labels])];\r\n    const combinedNames = [...new Set([...metadata.names, ...mediaAnalysisResults.texts])];\r\n\r\n    const formattedMetadata = {\r\n      ...metadata,\r\n      keywords: combinedKeywords,\r\n      names: combinedNames,\r\n      date: metadata.date ? new Date(metadata.date).toISOString().split('T')[0] : '',\r\n      startTime: metadata.startTime ? new Date(metadata.startTime).toISOString() : null,\r\n      endTime: metadata.endTime ? new Date(metadata.endTime).toISOString() : null,\r\n    };\r\n\r\n    const formData = new FormData();\r\n    formData.append('user', user.username);\r\n    formData.append('text', metadata.text);\r\n    formData.append('metadata', JSON.stringify(formattedMetadata));\r\n\r\n    selectedFiles.forEach((file) => {\r\n      formData.append('media', file);\r\n    });\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:3001/journal-entries', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n      if (response.ok) {\r\n        console.log('Journal entry saved successfully');\r\n      } else {\r\n        console.error('Failed to save journal entry');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"journal-entry-container\">\r\n      {/* Speech to Text Section */}\r\n      <div className=\"journal-entry-section\">\r\n        \r\n        <SpeechToText onMetadataChange={handleMetadataChange} />\r\n      </div>\r\n\r\n      {/* Media Upload Section */}\r\n      <div className=\"journal-entry-section\">\r\n        \r\n        <MediaUpload onMediaSelect={handleMediaSelect} />\r\n      </div>\r\n\r\n      {/* Metadata Display Section */}\r\n      <div className=\"journal-entry-section\">\r\n      \r\n        <MetadataDisplay metadata={metadata} mediaAnalysis={mediaAnalysisResults} onMetadataChange={handleMetadataChange} />\r\n      </div>\r\n\r\n      {/* Submit Button Section */}\r\n      <div className=\"submit-section\" style={{ textAlign: 'center', marginTop: '20px' }}>\r\n        <button onClick={handleSubmit}>Submit</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JournalEntry;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,SAASC,OAAO,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM;IAAEC;EAAK,CAAC,GAAGL,OAAO,CAAC,CAAC;EAC1B,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC;IACvCa,SAAS,EAAE,IAAI;IACfC,OAAO,EAAE,IAAI;IACbC,QAAQ,EAAE,IAAI;IACdC,IAAI,EAAE,EAAE;IACRC,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,IAAI,EAAE;EACR,CAAC,CAAC;EACF,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACsB,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGvB,QAAQ,CAAC;IAC/DwB,MAAM,EAAE,EAAE;IACVC,KAAK,EAAE;EACT,CAAC,CAAC;EAEF,MAAMC,oBAAoB,GAAIC,eAAe,IAAK;IAChDC,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEF,eAAe,CAAC;IACpE,MAAMG,iBAAiB,GAAG;MACxB,GAAGH,eAAe;MAClBX,IAAI,EAAEW,eAAe,CAACX,IAAI,GAAG,IAAIe,IAAI,CAACJ,eAAe,CAACX,IAAI,CAAC,CAACgB,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG;IAC5F,CAAC;IACDrB,WAAW,CAACkB,iBAAiB,CAAC;EAChC,CAAC;EAED,MAAMI,iBAAiB,GAAIC,KAAK,IAAK;IACnCP,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEM,KAAK,CAAC;IACrCd,gBAAgB,CAACc,KAAK,CAAC;IACvBA,KAAK,CAACC,OAAO,CAACC,qBAAqB,CAAC;EACtC,CAAC;EAED,MAAMC,0BAA0B,GAAIC,OAAO,IAAK;IAC9CX,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEU,OAAO,CAAC;IAC/ChB,uBAAuB,CAACgB,OAAO,CAAC;EAClC,CAAC;EAED,MAAMF,qBAAqB,GAAG,MAAOG,IAAI,IAAK;IAC5C,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,IAAI,CAAC;IAE9B,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAA2C,EAAE;QACxEC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEN;MACR,CAAC,CAAC;MAEF,IAAIG,QAAQ,CAACI,EAAE,EAAE;QACf,MAAMC,MAAM,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QACpCtB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEoB,MAAM,CAAC;QACvCX,0BAA0B,CAACW,MAAM,CAAC;MACpC,CAAC,MAAM;QACLrB,OAAO,CAACuB,KAAK,CAAC,yBAAyB,CAAC;MAC1C;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdvB,OAAO,CAACuB,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC;EACF,CAAC;EAED,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAMC,gBAAgB,GAAG,CAAC,GAAG,IAAIC,GAAG,CAAC,CAAC,GAAG3C,QAAQ,CAACM,QAAQ,EAAE,GAAGK,oBAAoB,CAACE,MAAM,CAAC,CAAC,CAAC;IAC7F,MAAM+B,aAAa,GAAG,CAAC,GAAG,IAAID,GAAG,CAAC,CAAC,GAAG3C,QAAQ,CAACO,KAAK,EAAE,GAAGI,oBAAoB,CAACG,KAAK,CAAC,CAAC,CAAC;IAEtF,MAAMK,iBAAiB,GAAG;MACxB,GAAGnB,QAAQ;MACXM,QAAQ,EAAEoC,gBAAgB;MAC1BnC,KAAK,EAAEqC,aAAa;MACpBvC,IAAI,EAAEL,QAAQ,CAACK,IAAI,GAAG,IAAIe,IAAI,CAACpB,QAAQ,CAACK,IAAI,CAAC,CAACgB,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE;MAC9EpB,SAAS,EAAEF,QAAQ,CAACE,SAAS,GAAG,IAAIkB,IAAI,CAACpB,QAAQ,CAACE,SAAS,CAAC,CAACmB,WAAW,CAAC,CAAC,GAAG,IAAI;MACjFlB,OAAO,EAAEH,QAAQ,CAACG,OAAO,GAAG,IAAIiB,IAAI,CAACpB,QAAQ,CAACG,OAAO,CAAC,CAACkB,WAAW,CAAC,CAAC,GAAG;IACzE,CAAC;IAED,MAAMS,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEjC,IAAI,CAAC8C,QAAQ,CAAC;IACtCf,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEhC,QAAQ,CAACQ,IAAI,CAAC;IACtCsB,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEc,IAAI,CAACC,SAAS,CAAC5B,iBAAiB,CAAC,CAAC;IAE9DV,aAAa,CAACgB,OAAO,CAAEI,IAAI,IAAK;MAC9BC,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,IAAI,CAAC;IAChC,CAAC,CAAC;IAEF,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;QACpEC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEN;MACR,CAAC,CAAC;MACF,IAAIG,QAAQ,CAACI,EAAE,EAAE;QACfpB,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;MACjD,CAAC,MAAM;QACLD,OAAO,CAACuB,KAAK,CAAC,8BAA8B,CAAC;MAC/C;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdvB,OAAO,CAACuB,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC;EACF,CAAC;EAED,oBACE5C,OAAA;IAAKoD,SAAS,EAAC,yBAAyB;IAAAC,QAAA,gBAEtCrD,OAAA;MAAKoD,SAAS,EAAC,uBAAuB;MAAAC,QAAA,eAEpCrD,OAAA,CAACN,YAAY;QAAC4D,gBAAgB,EAAEnC;MAAqB;QAAAoC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrD,CAAC,eAGN1D,OAAA;MAAKoD,SAAS,EAAC,uBAAuB;MAAAC,QAAA,eAEpCrD,OAAA,CAACL,WAAW;QAACgE,aAAa,EAAEhC;MAAkB;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,eAGN1D,OAAA;MAAKoD,SAAS,EAAC,uBAAuB;MAAAC,QAAA,eAEpCrD,OAAA,CAACH,eAAe;QAACO,QAAQ,EAAEA,QAAS;QAACwD,aAAa,EAAE7C,oBAAqB;QAACuC,gBAAgB,EAAEnC;MAAqB;QAAAoC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjH,CAAC,eAGN1D,OAAA;MAAKoD,SAAS,EAAC,gBAAgB;MAACS,KAAK,EAAE;QAAEC,SAAS,EAAE,QAAQ;QAAEC,SAAS,EAAE;MAAO,CAAE;MAAAV,QAAA,eAChFrD,OAAA;QAAQgE,OAAO,EAAEnB,YAAa;QAAAQ,QAAA,EAAC;MAAM;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACxD,EAAA,CA1HID,YAAY;EAAA,QACCH,OAAO;AAAA;AAAAmE,EAAA,GADpBhE,YAAY;AA4HlB,eAAeA,YAAY;AAAC,IAAAgE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}