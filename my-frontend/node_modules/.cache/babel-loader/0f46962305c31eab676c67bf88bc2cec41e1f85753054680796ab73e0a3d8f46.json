{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brads\\\\memory_app\\\\my-frontend\\\\src\\\\components\\\\SpeechToText.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpeechToText = () => {\n  _s();\n  const [text, setText] = useState('');\n  const [isListening, setIsListening] = useState(false);\n  const [metadata, setMetadata] = useState({\n    startTime: null,\n    endTime: null,\n    duration: null,\n    date: null,\n    keywords: [],\n    names: []\n  });\n  const recognitionRef = useRef(null);\n  const createRecognitionInstance = () => {\n    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n    recognition.continuous = true;\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n    recognition.onresult = event => {\n      const transcript = Array.from(event.results).map(result => result[0].transcript).join('');\n      console.log('Transcript received:', transcript);\n      setText(prevText => prevText + ' ' + transcript);\n    };\n    recognition.onerror = event => {\n      console.error('Speech recognition error:', event.error);\n      setIsListening(false);\n      recognition.stop();\n    };\n    recognition.onend = () => {\n      console.log('Recognition ended. isListening:', isListening);\n      if (isListening) {\n        recognition.start();\n      }\n    };\n    recognitionRef.current = recognition;\n  };\n  const startListening = () => {\n    console.log('Starting listening');\n    createRecognitionInstance();\n    const startTime = metadata.startTime ? metadata.startTime : new Date();\n    setMetadata(prev => ({\n      ...prev,\n      startTime,\n      endTime: null,\n      duration: null,\n      date: new Date()\n    }));\n    setIsListening(true);\n    recognitionRef.current.start();\n  };\n  const stopListening = () => {\n    console.log('Stopping listening');\n    if (recognitionRef.current) {\n      const endTime = new Date();\n      const duration = endTime - metadata.startTime;\n      setMetadata(prev => ({\n        ...prev,\n        endTime,\n        duration\n      }));\n      setIsListening(false);\n      recognitionRef.current.stop();\n    }\n  };\n  const extractMetadata = async () => {\n    if (!text.trim()) {\n      return;\n    }\n    console.log('Extracting metadata');\n    try {\n      const response = await fetch('http://localhost:3001/api/extract-metadata', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Response from backend:', data);\n\n      // Extract keywords and names from the response\n      const keywords = Array.isArray(data.keywords) ? data.keywords.filter(kw => kw.trim() !== '') : [];\n      const names = Array.isArray(data.names) ? data.names.filter(name => name.trim() !== '') : [];\n      if (keywords.length === 0 && names.length === 0) {\n        throw new Error('Invalid response: Keywords and Names are empty or undefined');\n      }\n\n      // Conditionally update metadata with keywords and names if they are not empty\n      setMetadata(prev => {\n        const updatedMetadata = {\n          ...prev,\n          keywords: keywords.length > 0 ? keywords : prev.keywords,\n          names: names.length > 0 ? names : prev.names\n        };\n        console.log('Updated metadata:', updatedMetadata);\n        return updatedMetadata;\n      });\n    } catch (error) {\n      console.error('Error extracting metadata:', error);\n    }\n  };\n  const handleTextChange = event => {\n    setText(event.target.value);\n    const endTime = new Date();\n    setMetadata(prev => ({\n      ...prev,\n      endTime\n    }));\n  };\n  const formatTime = time => {\n    return time ? new Date(time).toLocaleTimeString() : 'N/A';\n  };\n  const formatDate = time => {\n    return time ? new Date(time).toLocaleDateString() : 'N/A';\n  };\n  const formatDuration = duration => {\n    if (!duration) return 'N/A';\n    const seconds = Math.floor(duration / 1000);\n    return `${seconds} seconds`;\n  };\n  useEffect(() => {\n    console.log('Metadata updated:', metadata);\n  }, [metadata]);\n  useEffect(() => {\n    console.log('isListening state:', isListening);\n  }, [isListening]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      marginTop: '50px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        textAlign: 'center',\n        marginRight: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Speech to Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '20px 0'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: isListening ? stopListening : startListening,\n          children: isListening ? 'Stop Listening' : 'Start Listening'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: text,\n        rows: \"10\",\n        cols: \"50\",\n        onChange: handleTextChange,\n        placeholder: \"Your speech or text will appear here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '20px 0'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: extractMetadata,\n          children: \"Extract Metadata\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Recording Metadata\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 12\n        }, this), \" \", formatDate(metadata.startTime)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Start Time:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 12\n        }, this), \" \", formatTime(metadata.startTime)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"End Time:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 12\n        }, this), \" \", formatTime(metadata.endTime)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Duration:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 12\n        }, this), \" \", formatDuration(metadata.duration)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Names:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 12\n        }, this), \" \", metadata.names.length > 0 ? metadata.names.join(', ') : 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Keywords:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 12\n        }, this), \" \", metadata.keywords.length > 0 ? metadata.keywords.join(', ') : 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n_s(SpeechToText, \"r+jpf8vfh50KfB7nOMhu7snzElE=\");\n_c = SpeechToText;\nexport default SpeechToText;\nvar _c;\n$RefreshReg$(_c, \"SpeechToText\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","SpeechToText","_s","text","setText","isListening","setIsListening","metadata","setMetadata","startTime","endTime","duration","date","keywords","names","recognitionRef","createRecognitionInstance","recognition","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","transcript","Array","from","results","map","result","join","console","log","prevText","onerror","error","stop","onend","start","current","startListening","Date","prev","stopListening","extractMetadata","trim","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","isArray","filter","kw","name","length","updatedMetadata","handleTextChange","target","value","formatTime","time","toLocaleTimeString","formatDate","toLocaleDateString","formatDuration","seconds","Math","floor","style","display","justifyContent","marginTop","children","flex","textAlign","marginRight","fileName","_jsxFileName","lineNumber","columnNumber","margin","onClick","rows","cols","onChange","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/brads/memory_app/my-frontend/src/components/SpeechToText.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\nconst SpeechToText = () => {\r\n  const [text, setText] = useState('');\r\n  const [isListening, setIsListening] = useState(false);\r\n  const [metadata, setMetadata] = useState({\r\n    startTime: null,\r\n    endTime: null,\r\n    duration: null,\r\n    date: null,\r\n    keywords: [],\r\n    names: [],\r\n  });\r\n\r\n  const recognitionRef = useRef(null);\r\n\r\n  const createRecognitionInstance = () => {\r\n    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\r\n    recognition.continuous = true;\r\n    recognition.interimResults = false;\r\n    recognition.lang = 'en-US';\r\n\r\n    recognition.onresult = (event) => {\r\n      const transcript = Array.from(event.results)\r\n        .map((result) => result[0].transcript)\r\n        .join('');\r\n      console.log('Transcript received:', transcript);\r\n      setText((prevText) => prevText + ' ' + transcript);\r\n    };\r\n\r\n    recognition.onerror = (event) => {\r\n      console.error('Speech recognition error:', event.error);\r\n      setIsListening(false);\r\n      recognition.stop();\r\n    };\r\n\r\n    recognition.onend = () => {\r\n      console.log('Recognition ended. isListening:', isListening);\r\n      if (isListening) {\r\n        recognition.start();\r\n      }\r\n    };\r\n\r\n    recognitionRef.current = recognition;\r\n  };\r\n\r\n  const startListening = () => {\r\n    console.log('Starting listening');\r\n    createRecognitionInstance();\r\n    const startTime = metadata.startTime ? metadata.startTime : new Date();\r\n    setMetadata((prev) => ({\r\n      ...prev,\r\n      startTime,\r\n      endTime: null,\r\n      duration: null,\r\n      date: new Date(),\r\n    }));\r\n    setIsListening(true);\r\n    recognitionRef.current.start();\r\n  };\r\n\r\n  const stopListening = () => {\r\n    console.log('Stopping listening');\r\n    if (recognitionRef.current) {\r\n      const endTime = new Date();\r\n      const duration = endTime - metadata.startTime;\r\n      setMetadata((prev) => ({\r\n        ...prev,\r\n        endTime,\r\n        duration,\r\n      }));\r\n      setIsListening(false);\r\n      recognitionRef.current.stop();\r\n    }\r\n  };\r\n\r\n  const extractMetadata = async () => {\r\n    if (!text.trim()) {\r\n      return;\r\n    }\r\n    console.log('Extracting metadata');\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/extract-metadata', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ text }),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n  \r\n      const data = await response.json();\r\n      console.log('Response from backend:', data);\r\n  \r\n      // Extract keywords and names from the response\r\n      const keywords = Array.isArray(data.keywords) ? data.keywords.filter(kw => kw.trim() !== '') : [];\r\n      const names = Array.isArray(data.names) ? data.names.filter(name => name.trim() !== '') : [];\r\n  \r\n      if (keywords.length === 0 && names.length === 0) {\r\n        throw new Error('Invalid response: Keywords and Names are empty or undefined');\r\n      }\r\n  \r\n      // Conditionally update metadata with keywords and names if they are not empty\r\n      setMetadata((prev) => {\r\n        const updatedMetadata = {\r\n          ...prev,\r\n          keywords: keywords.length > 0 ? keywords : prev.keywords,\r\n          names: names.length > 0 ? names : prev.names,\r\n        };\r\n        console.log('Updated metadata:', updatedMetadata);\r\n        return updatedMetadata;\r\n      });\r\n  \r\n    } catch (error) {\r\n      console.error('Error extracting metadata:', error);\r\n    }\r\n  };\r\n  \r\n  \r\n  \r\n\r\n  const handleTextChange = (event) => {\r\n    setText(event.target.value);\r\n    const endTime = new Date();\r\n    setMetadata((prev) => ({\r\n      ...prev,\r\n      endTime,\r\n    }));\r\n  };\r\n\r\n  const formatTime = (time) => {\r\n    return time ? new Date(time).toLocaleTimeString() : 'N/A';\r\n  };\r\n\r\n  const formatDate = (time) => {\r\n    return time ? new Date(time).toLocaleDateString() : 'N/A';\r\n  };\r\n\r\n  const formatDuration = (duration) => {\r\n    if (!duration) return 'N/A';\r\n    const seconds = Math.floor(duration / 1000);\r\n    return `${seconds} seconds`;\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log('Metadata updated:', metadata);\r\n  }, [metadata]);\r\n\r\n  useEffect(() => {\r\n    console.log('isListening state:', isListening);\r\n  }, [isListening]);\r\n\r\n  return (\r\n    <div style={{ display: 'flex', justifyContent: 'center', marginTop: '50px' }}>\r\n      <div style={{ flex: 1, textAlign: 'center', marginRight: '20px' }}>\r\n        <h1>Speech to Text</h1>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <button onClick={isListening ? stopListening : startListening}>\r\n            {isListening ? 'Stop Listening' : 'Start Listening'}\r\n          </button>\r\n        </div>\r\n        <textarea\r\n          value={text}\r\n          rows=\"10\"\r\n          cols=\"50\"\r\n          onChange={handleTextChange}\r\n          placeholder=\"Your speech or text will appear here...\"\r\n        />\r\n        <div style={{ margin: '20px 0' }}>\r\n          <button onClick={extractMetadata}>\r\n            Extract Metadata\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <h2>Recording Metadata</h2>\r\n        <p><strong>Date:</strong> {formatDate(metadata.startTime)}</p>\r\n        <p><strong>Start Time:</strong> {formatTime(metadata.startTime)}</p>\r\n        <p><strong>End Time:</strong> {formatTime(metadata.endTime)}</p>\r\n        <p><strong>Duration:</strong> {formatDuration(metadata.duration)}</p>\r\n        <p><strong>Names:</strong> {metadata.names.length > 0 ? metadata.names.join(', ') : 'N/A'}</p>\r\n        <p><strong>Keywords:</strong> {metadata.keywords.length > 0 ? metadata.keywords.join(', ') : 'N/A'}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpeechToText;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}