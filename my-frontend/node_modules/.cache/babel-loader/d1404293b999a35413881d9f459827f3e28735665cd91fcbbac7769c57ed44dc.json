{"ast":null,"code":"const handleSubmit = async () => {\n  setIsSubmitting(true);\n  setMessage('');\n  const formData = new FormData();\n  formData.append('text', text);\n  formData.append('metadata', JSON.stringify(metadata));\n  selectedMedia.forEach((file, index) => {\n    formData.append(`media${index}`, file);\n  });\n  formData.append('user', 'specificUserId'); // Replace with actual user ID or get it dynamically\n\n  try {\n    const response = await fetch('http://localhost:3001/journal-entries', {\n      // Ensure the URL matches this route\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    setMessage('Journal entry submitted successfully!');\n    // Clear the input fields after successful submission\n    setText('');\n    setMetadata({\n      startTime: null,\n      endTime: null,\n      duration: null,\n      date: null,\n      keywords: [],\n      names: []\n    });\n    setSelectedMedia([]);\n  } catch (error) {\n    setMessage(`Error submitting journal entry: ${error.message}`);\n  } finally {\n    setIsSubmitting(false);\n  }\n};","map":{"version":3,"names":["handleSubmit","setIsSubmitting","setMessage","formData","FormData","append","text","JSON","stringify","metadata","selectedMedia","forEach","file","index","response","fetch","method","body","ok","Error","status","data","json","setText","setMetadata","startTime","endTime","duration","date","keywords","names","setSelectedMedia","error","message"],"sources":["C:/Users/brads/memory_app/my-frontend/src/components/JournalEntry.js"],"sourcesContent":["const handleSubmit = async () => {\r\n    setIsSubmitting(true);\r\n    setMessage('');\r\n  \r\n    const formData = new FormData();\r\n    formData.append('text', text);\r\n    formData.append('metadata', JSON.stringify(metadata));\r\n    selectedMedia.forEach((file, index) => {\r\n      formData.append(`media${index}`, file);\r\n    });\r\n    formData.append('user', 'specificUserId'); // Replace with actual user ID or get it dynamically\r\n  \r\n    try {\r\n      const response = await fetch('http://localhost:3001/journal-entries', { // Ensure the URL matches this route\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n  \r\n      const data = await response.json();\r\n      setMessage('Journal entry submitted successfully!');\r\n      // Clear the input fields after successful submission\r\n      setText('');\r\n      setMetadata({\r\n        startTime: null,\r\n        endTime: null,\r\n        duration: null,\r\n        date: null,\r\n        keywords: [],\r\n        names: [],\r\n      });\r\n      setSelectedMedia([]);\r\n    } catch (error) {\r\n      setMessage(`Error submitting journal entry: ${error.message}`);\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n  "],"mappings":"AAAA,MAAMA,YAAY,GAAG,MAAAA,CAAA,KAAY;EAC7BC,eAAe,CAAC,IAAI,CAAC;EACrBC,UAAU,CAAC,EAAE,CAAC;EAEd,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEC,IAAI,CAAC;EAC7BH,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEE,IAAI,CAACC,SAAS,CAACC,QAAQ,CAAC,CAAC;EACrDC,aAAa,CAACC,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;IACrCV,QAAQ,CAACE,MAAM,CAAC,QAAQQ,KAAK,EAAE,EAAED,IAAI,CAAC;EACxC,CAAC,CAAC;EACFT,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC,CAAC;;EAE3C,IAAI;IACF,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;MAAE;MACtEC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEd;IACR,CAAC,CAAC;IAEF,IAAI,CAACW,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBL,QAAQ,CAACM,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClCpB,UAAU,CAAC,uCAAuC,CAAC;IACnD;IACAqB,OAAO,CAAC,EAAE,CAAC;IACXC,WAAW,CAAC;MACVC,SAAS,EAAE,IAAI;MACfC,OAAO,EAAE,IAAI;MACbC,QAAQ,EAAE,IAAI;MACdC,IAAI,EAAE,IAAI;MACVC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE;IACT,CAAC,CAAC;IACFC,gBAAgB,CAAC,EAAE,CAAC;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd9B,UAAU,CAAC,mCAAmC8B,KAAK,CAACC,OAAO,EAAE,CAAC;EAChE,CAAC,SAAS;IACRhC,eAAe,CAAC,KAAK,CAAC;EACxB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}